{"ast":null,"code":"import * as THREE from \"three\";\nimport { Pass } from \"postprocessing\";\nimport { Buffer } from \"buffer\";\nimport { FullScreenTriangle } from \"./FullScreenTriangle.js\";\nimport { EffectShader } from \"./EffectShader.js\";\nimport { EffectCompositer } from \"./EffectCompositer.js\";\nimport { PoissionBlur } from \"./PoissionBlur.js\";\nimport { DepthDownSample } from \"./DepthDownSample.js\";\nimport BlueNoise from \"./BlueNoise.js\";\nconst bluenoiseBits = Buffer.from(BlueNoise, \"base64\");\nfunction checkTimerQuery(timerQuery, gl, pass) {\n  const available = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT_AVAILABLE);\n  if (available) {\n    const elapsedTimeInNs = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT);\n    const elapsedTimeInMs = elapsedTimeInNs / 1e6;\n    pass.lastTime = elapsedTimeInMs;\n  } else {\n    setTimeout(() => {\n      checkTimerQuery(timerQuery, gl, pass);\n    }, 1);\n  }\n}\nclass N8AOPostPass extends Pass {\n  /**\n   *\n   * @param {THREE.Scene} scene\n   * @param {THREE.Camera} camera\n   * @param {number} width\n   * @param {number} height\n   *\n   * @property {THREE.Scene} scene\n   * @property {THREE.Camera} camera\n   * @property {number} width\n   * @property {number} height\n   */\n  constructor(scene, camera, width = 512, height = 512) {\n    super();\n    this.width = width;\n    this.height = height;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.autosetGamma = true;\n    this.configuration = new Proxy({\n      aoSamples: 16,\n      aoRadius: 5,\n      denoiseSamples: 8,\n      denoiseRadius: 12,\n      distanceFalloff: 1,\n      intensity: 5,\n      denoiseIterations: 2,\n      renderMode: 0,\n      color: new THREE.Color(0, 0, 0),\n      gammaCorrection: true,\n      logarithmicDepthBuffer: false,\n      screenSpaceRadius: false,\n      halfRes: false,\n      depthAwareUpsampling: true,\n      colorMultiply: true\n    }, {\n      set: (target, propName, value) => {\n        const oldProp = target[propName];\n        target[propName] = value;\n        if (propName === \"aoSamples\" && oldProp !== value) {\n          this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n        }\n        if (propName === \"denoiseSamples\" && oldProp !== value) {\n          this.configureDenoisePass(this.configuration.logarithmicDepthBuffer);\n        }\n        if (propName === \"halfRes\" && oldProp !== value) {\n          this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n          this.configureHalfResTargets();\n          this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n          this.setSize(this.width, this.height);\n        }\n        if (propName === \"depthAwareUpsampling\" && oldProp !== value) {\n          this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n        }\n        if (propName === \"gammaCorrection\") {\n          this.autosetGamma = false;\n        }\n        return true;\n      }\n    });\n    this.samples = [];\n    this.samplesR = [];\n    this.samplesDenoise = [];\n    this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n    this.configureSampleDependentPasses();\n    this.configureHalfResTargets();\n    this.copyQuad = new FullScreenTriangle(new THREE.ShaderMaterial({\n      uniforms: {\n        tDiffuse: {\n          value: null\n        }\n      },\n      depthWrite: false,\n      vertexShader: `\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = vec4(position, 1);\n            }\n            `,\n      fragmentShader: `\n            uniform sampler2D tDiffuse;\n            varying vec2 vUv;\n            void main() {\n                gl_FragColor = texture2D(tDiffuse, vUv);\n            }\n            `\n    }));\n    this.writeTargetInternal = new THREE.WebGLRenderTarget(this.width, this.height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      depthBuffer: false\n    });\n    this.readTargetInternal = new THREE.WebGLRenderTarget(this.width, this.height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      depthBuffer: false\n    });\n    this.outputTargetInternal = new THREE.WebGLRenderTarget(this.width, this.height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      depthBuffer: false\n    });\n    this.bluenoise =\n    //bluenoise;\n    new THREE.DataTexture(bluenoiseBits, 128, 128);\n    this.bluenoise.colorSpace = THREE.NoColorSpace;\n    this.bluenoise.wrapS = THREE.RepeatWrapping;\n    this.bluenoise.wrapT = THREE.RepeatWrapping;\n    this.bluenoise.minFilter = THREE.NearestFilter;\n    this.bluenoise.magFilter = THREE.NearestFilter;\n    this.bluenoise.needsUpdate = true;\n    this.lastTime = 0;\n    this.needsDepthTexture = true;\n    this.needsSwap = true;\n    this._r = new THREE.Vector2();\n    this._c = new THREE.Color();\n  }\n  configureHalfResTargets() {\n    if (this.configuration.halfRes) {\n      this.depthDownsampleTarget =\n      /*new THREE.WebGLRenderTarget(this.width / 2, this.height / 2, {\n      minFilter: THREE.NearestFilter,\n      magFilter: THREE.NearestFilter,\n      depthBuffer: false,\n      format: THREE.RedFormat,\n      type: THREE.FloatType\n      });*/\n      new THREE.WebGLMultipleRenderTargets(this.width / 2, this.height / 2, 2);\n      this.depthDownsampleTarget.texture[0].format = THREE.RedFormat;\n      this.depthDownsampleTarget.texture[0].type = THREE.FloatType;\n      this.depthDownsampleTarget.texture[0].minFilter = THREE.NearestFilter;\n      this.depthDownsampleTarget.texture[0].magFilter = THREE.NearestFilter;\n      this.depthDownsampleTarget.texture[0].depthBuffer = false;\n      this.depthDownsampleTarget.texture[1].format = THREE.RGBAFormat;\n      this.depthDownsampleTarget.texture[1].type = THREE.HalfFloatType;\n      this.depthDownsampleTarget.texture[1].minFilter = THREE.NearestFilter;\n      this.depthDownsampleTarget.texture[1].magFilter = THREE.NearestFilter;\n      this.depthDownsampleTarget.texture[1].depthBuffer = false;\n      this.depthDownsampleQuad = new FullScreenTriangle(new THREE.ShaderMaterial(DepthDownSample));\n    } else {\n      if (this.depthDownsampleTarget) {\n        this.depthDownsampleTarget.dispose();\n        this.depthDownsampleTarget = null;\n      }\n      if (this.depthDownsampleQuad) {\n        this.depthDownsampleQuad.dispose();\n        this.depthDownsampleQuad = null;\n      }\n    }\n  }\n  configureSampleDependentPasses() {\n    this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n    this.configureDenoisePass(this.configuration.logarithmicDepthBuffer);\n  }\n  configureAOPass(logarithmicDepthBuffer = false) {\n    this.samples = this.generateHemisphereSamples(this.configuration.aoSamples);\n    this.samplesR = this.generateHemisphereSamplesR(this.configuration.aoSamples);\n    const e = {\n      ...EffectShader\n    };\n    e.fragmentShader = e.fragmentShader.replace(\"16\", this.configuration.aoSamples).replace(\"16.0\", this.configuration.aoSamples + \".0\");\n    if (logarithmicDepthBuffer) {\n      e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n    }\n    if (this.configuration.halfRes) {\n      e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n    }\n    if (this.effectShaderQuad) {\n      this.effectShaderQuad.material.dispose();\n      this.effectShaderQuad.material = new THREE.ShaderMaterial(e);\n    } else {\n      this.effectShaderQuad = new FullScreenTriangle(new THREE.ShaderMaterial(e));\n    }\n  }\n  configureDenoisePass(logarithmicDepthBuffer = false) {\n    this.samplesDenoise = this.generateDenoiseSamples(this.configuration.denoiseSamples, 11);\n    const p = {\n      ...PoissionBlur\n    };\n    p.fragmentShader = p.fragmentShader.replace(\"16\", this.configuration.denoiseSamples);\n    if (logarithmicDepthBuffer) {\n      p.fragmentShader = \"#define LOGDEPTH\\n\" + p.fragmentShader;\n    }\n    if (this.poissonBlurQuad) {\n      this.poissonBlurQuad.material.dispose();\n      this.poissonBlurQuad.material = new THREE.ShaderMaterial(p);\n    } else {\n      this.poissonBlurQuad = new FullScreenTriangle(new THREE.ShaderMaterial(p));\n    }\n  }\n  configureEffectCompositer(logarithmicDepthBuffer = false) {\n    const e = {\n      ...EffectCompositer\n    };\n    if (logarithmicDepthBuffer) {\n      e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n    }\n    if (this.configuration.halfRes && this.configuration.depthAwareUpsampling) {\n      e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n    }\n    if (this.effectCompositerQuad) {\n      this.effectCompositerQuad.material.dispose();\n      this.effectCompositerQuad.material = new THREE.ShaderMaterial(e);\n    } else {\n      this.effectCompositerQuad = new FullScreenTriangle(new THREE.ShaderMaterial(e));\n    }\n  }\n  /**\n   *\n   * @param {Number} n\n   * @returns {THREE.Vector3[]}\n   */\n  generateHemisphereSamples(n) {\n    const points = [];\n    for (let k = 0; k < n; k++) {\n      const theta = 2.399963 * k;\n      const r = Math.sqrt(k + 0.5) / Math.sqrt(n);\n      const x = r * Math.cos(theta);\n      const y = r * Math.sin(theta);\n      const z = Math.sqrt(1 - (x * x + y * y));\n      points.push(new THREE.Vector3(x, y, z));\n    }\n    return points;\n  }\n  /**\n   *\n   * @param {number} n\n   * @returns {number[]}\n   */\n  generateHemisphereSamplesR(n) {\n    let samplesR = [];\n    for (let i = 0; i < n; i++) {\n      samplesR.push((i + 1) / n);\n    }\n    return samplesR;\n  }\n  /**\n   *\n   * @param {number} numSamples\n   * @param {number} numRings\n   * @returns {THREE.Vector2[]}\n   */\n  generateDenoiseSamples(numSamples, numRings) {\n    const angleStep = 2 * Math.PI * numRings / numSamples;\n    const invNumSamples = 1 / numSamples;\n    const radiusStep = invNumSamples;\n    const samples = [];\n    let radius = invNumSamples;\n    let angle = 0;\n    for (let i = 0; i < numSamples; i++) {\n      samples.push(new THREE.Vector2(Math.cos(angle), Math.sin(angle)).multiplyScalar(Math.pow(radius, 0.75)));\n      radius += radiusStep;\n      angle += angleStep;\n    }\n    return samples;\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    const c = this.configuration.halfRes ? 0.5 : 1;\n    this.writeTargetInternal.setSize(width * c, height * c);\n    this.readTargetInternal.setSize(width * c, height * c);\n    if (this.configuration.halfRes) {\n      this.depthDownsampleTarget.setSize(width * c, height * c);\n    }\n    this.outputTargetInternal.setSize(width, height);\n  }\n  setDepthTexture(depthTexture) {\n    this.depthTexture = depthTexture;\n  }\n  render(renderer, inputBuffer, outputBuffer) {\n    const xrEnabled = renderer.xr.enabled;\n    renderer.xr.enabled = false;\n    if (renderer.capabilities.logarithmicDepthBuffer !== this.configuration.logarithmicDepthBuffer) {\n      this.configuration.logarithmicDepthBuffer = renderer.capabilities.logarithmicDepthBuffer;\n      this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n      this.configureDenoisePass(this.configuration.logarithmicDepthBuffer);\n      this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n    }\n    if (inputBuffer.texture.type !== this.outputTargetInternal.texture.type) {\n      this.outputTargetInternal.texture.type = inputBuffer.texture.type;\n      this.outputTargetInternal.texture.needsUpdate = true;\n    }\n    let gl;\n    let ext;\n    let timerQuery;\n    if (this.debugMode) {\n      gl = renderer.getContext();\n      ext = gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n      if (ext === null) {\n        console.error(\"EXT_disjoint_timer_query_webgl2 not available, disabling debug mode.\");\n        this.debugMode = false;\n      }\n    }\n    if (this.debugMode) {\n      timerQuery = gl.createQuery();\n      gl.beginQuery(ext.TIME_ELAPSED_EXT, timerQuery);\n    }\n    this.camera.updateMatrixWorld();\n    this._r.set(this.width, this.height);\n    let trueRadius = this.configuration.aoRadius;\n    if (this.configuration.halfRes && this.configuration.screenSpaceRadius) {\n      trueRadius *= 0.5;\n    }\n    if (this.configuration.halfRes) {\n      renderer.setRenderTarget(this.depthDownsampleTarget);\n      this.depthDownsampleQuad.material.uniforms.sceneDepth.value = this.depthTexture;\n      this.depthDownsampleQuad.material.uniforms.resolution.value = this._r;\n      this.depthDownsampleQuad.material.uniforms[\"near\"].value = this.camera.near;\n      this.depthDownsampleQuad.material.uniforms[\"far\"].value = this.camera.far;\n      this.depthDownsampleQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n      this.depthDownsampleQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n      this.depthDownsampleQuad.material.uniforms[\"logDepth\"].value = this.configuration.logarithmicDepthBuffer;\n      this.depthDownsampleQuad.render(renderer);\n    }\n    this.effectShaderQuad.material.uniforms[\"sceneDiffuse\"].value = inputBuffer.texture;\n    this.effectShaderQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[0] : this.depthTexture;\n    this.effectShaderQuad.material.uniforms[\"sceneNormal\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[1] : null;\n    this.effectShaderQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n    this.effectShaderQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n    this.effectShaderQuad.material.uniforms[\"projViewMat\"].value = this.camera.projectionMatrix.clone().multiply(this.camera.matrixWorldInverse.clone());\n    this.effectShaderQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n    this.effectShaderQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n    this.effectShaderQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new THREE.Vector3());\n    this.effectShaderQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(1 / 2).floor() : this._r;\n    this.effectShaderQuad.material.uniforms[\"time\"].value = performance.now() / 1e3;\n    this.effectShaderQuad.material.uniforms[\"samples\"].value = this.samples;\n    this.effectShaderQuad.material.uniforms[\"samplesR\"].value = this.samplesR;\n    this.effectShaderQuad.material.uniforms[\"bluenoise\"].value = this.bluenoise;\n    this.effectShaderQuad.material.uniforms[\"radius\"].value = trueRadius;\n    this.effectShaderQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n    this.effectShaderQuad.material.uniforms[\"near\"].value = this.camera.near;\n    this.effectShaderQuad.material.uniforms[\"far\"].value = this.camera.far;\n    this.effectShaderQuad.material.uniforms[\"logDepth\"].value = renderer.capabilities.logarithmicDepthBuffer;\n    this.effectShaderQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n    this.effectShaderQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n    renderer.setRenderTarget(this.writeTargetInternal);\n    this.effectShaderQuad.render(renderer);\n    for (let i = 0; i < this.configuration.denoiseIterations; i++) {\n      [this.writeTargetInternal, this.readTargetInternal] = [this.readTargetInternal, this.writeTargetInternal];\n      this.poissonBlurQuad.material.uniforms[\"tDiffuse\"].value = this.readTargetInternal.texture;\n      this.poissonBlurQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[0] : this.depthTexture;\n      this.poissonBlurQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n      this.poissonBlurQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n      this.poissonBlurQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n      this.poissonBlurQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n      this.poissonBlurQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new THREE.Vector3());\n      this.poissonBlurQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(1 / 2).floor() : this._r;\n      this.poissonBlurQuad.material.uniforms[\"time\"].value = performance.now() / 1e3;\n      this.poissonBlurQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n      this.poissonBlurQuad.material.uniforms[\"radius\"].value = this.configuration.denoiseRadius * (this.configuration.halfRes ? 1 / 2 : 1);\n      this.poissonBlurQuad.material.uniforms[\"worldRadius\"].value = trueRadius;\n      this.poissonBlurQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n      this.poissonBlurQuad.material.uniforms[\"index\"].value = i;\n      this.poissonBlurQuad.material.uniforms[\"poissonDisk\"].value = this.samplesDenoise;\n      this.poissonBlurQuad.material.uniforms[\"near\"].value = this.camera.near;\n      this.poissonBlurQuad.material.uniforms[\"far\"].value = this.camera.far;\n      this.poissonBlurQuad.material.uniforms[\"logDepth\"].value = renderer.capabilities.logarithmicDepthBuffer;\n      this.poissonBlurQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n      renderer.setRenderTarget(this.writeTargetInternal);\n      this.poissonBlurQuad.render(renderer);\n    }\n    this.effectCompositerQuad.material.uniforms[\"sceneDiffuse\"].value = inputBuffer.texture;\n    this.effectCompositerQuad.material.uniforms[\"sceneDepth\"].value = this.depthTexture;\n    this.effectCompositerQuad.material.uniforms[\"near\"].value = this.camera.near;\n    this.effectCompositerQuad.material.uniforms[\"far\"].value = this.camera.far;\n    this.effectCompositerQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n    this.effectCompositerQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n    this.effectCompositerQuad.material.uniforms[\"logDepth\"].value = renderer.capabilities.logarithmicDepthBuffer;\n    this.effectCompositerQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n    this.effectCompositerQuad.material.uniforms[\"downsampledDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[0] : this.depthTexture;\n    this.effectCompositerQuad.material.uniforms[\"resolution\"].value = this._r;\n    this.effectCompositerQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n    this.effectCompositerQuad.material.uniforms[\"intensity\"].value = this.configuration.intensity;\n    this.effectCompositerQuad.material.uniforms[\"renderMode\"].value = this.configuration.renderMode;\n    this.effectCompositerQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n    this.effectCompositerQuad.material.uniforms[\"radius\"].value = trueRadius;\n    this.effectCompositerQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n    this.effectCompositerQuad.material.uniforms[\"gammaCorrection\"].value = this.autosetGamma ? this.renderToScreen : this.configuration.gammaCorrection;\n    this.effectCompositerQuad.material.uniforms[\"tDiffuse\"].value = this.writeTargetInternal.texture;\n    this.effectCompositerQuad.material.uniforms[\"color\"].value = this._c.copy(this.configuration.color).convertSRGBToLinear();\n    this.effectCompositerQuad.material.uniforms[\"colorMultiply\"].value = this.configuration.colorMultiply;\n    this.effectCompositerQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new THREE.Vector3());\n    this.effectCompositerQuad.material.uniforms[\"fog\"].value = !!this.scene.fog;\n    if (this.scene.fog) {\n      if (this.scene.fog.isFog) {\n        this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = false;\n        this.effectCompositerQuad.material.uniforms[\"fogNear\"].value = this.scene.fog.near;\n        this.effectCompositerQuad.material.uniforms[\"fogFar\"].value = this.scene.fog.far;\n      } else if (this.scene.fog.isFogExp2) {\n        this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = true;\n        this.effectCompositerQuad.material.uniforms[\"fogDensity\"].value = this.scene.fog.density;\n      } else {\n        console.error(`Unsupported fog type ${this.scene.fog.constructor.name} in SSAOPass.`);\n      }\n    }\n    renderer.setRenderTarget(\n    /* this.renderToScreen ? null :\n               outputBuffer*/\n    this.outputTargetInternal);\n    this.effectCompositerQuad.render(renderer);\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    this.copyQuad.material.uniforms[\"tDiffuse\"].value = this.outputTargetInternal.texture;\n    this.copyQuad.render(renderer);\n    if (this.debugMode) {\n      gl.endQuery(ext.TIME_ELAPSED_EXT);\n      checkTimerQuery(timerQuery, gl, this);\n    }\n    renderer.xr.enabled = xrEnabled;\n  }\n  /**\n   * Enables the debug mode of the AO, meaning the lastTime value will be updated.\n   */\n  enableDebugMode() {\n    this.debugMode = true;\n  }\n  /**\n   * Disables the debug mode of the AO, meaning the lastTime value will not be updated.\n   */\n  disableDebugMode() {\n    this.debugMode = false;\n  }\n  /**\n   * Sets the display mode of the AO\n   * @param {\"Combined\" | \"AO\" | \"No AO\" | \"Split\" | \"Split AO\"} mode - The display mode.\n   */\n  setDisplayMode(mode) {\n    this.configuration.renderMode = [\"Combined\", \"AO\", \"No AO\", \"Split\", \"Split AO\"].indexOf(mode);\n  }\n  /**\n   *\n   * @param {\"Performance\" | \"Low\" | \"Medium\" | \"High\" | \"Ultra\"} mode\n   */\n  setQualityMode(mode) {\n    if (mode === \"Performance\") {\n      this.configuration.aoSamples = 8;\n      this.configuration.denoiseSamples = 4;\n      this.configuration.denoiseRadius = 12;\n    } else if (mode === \"Low\") {\n      this.configuration.aoSamples = 16;\n      this.configuration.denoiseSamples = 4;\n      this.configuration.denoiseRadius = 12;\n    } else if (mode === \"Medium\") {\n      this.configuration.aoSamples = 16;\n      this.configuration.denoiseSamples = 8;\n      this.configuration.denoiseRadius = 12;\n    } else if (mode === \"High\") {\n      this.configuration.aoSamples = 64;\n      this.configuration.denoiseSamples = 8;\n      this.configuration.denoiseRadius = 6;\n    } else if (mode === \"Ultra\") {\n      this.configuration.aoSamples = 64;\n      this.configuration.denoiseSamples = 16;\n      this.configuration.denoiseRadius = 6;\n    }\n  }\n}\nexport { N8AOPostPass };\n//# sourceMappingURL=N8AOPostPass.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}