{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stefa\\\\OneDrive\\\\Desktop\\\\Merry Christmas\\\\src\\\\SnowFlakes.js\",\n  _s = $RefreshSig$();\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { useMemo, useRef, Suspense } from 'react';\nimport { easing } from 'maath';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SnowFlakes({\n  count\n}) {\n  _s();\n  const mesh = useRef();\n  const dummy = new THREE.Object3D();\n  const particles = useMemo(() => {\n    const temp = [];\n    for (let i = 0; i < count; i++) {\n      const phi = Math.acos(-1 + Math.random() * 2);\n      const theta = Math.random() * 2 * Math.PI;\n      const radius = 5 + Math.random() * 6.5;\n      const x = radius * Math.sin(phi) * Math.cos(theta);\n      const y = radius * Math.sin(phi) * Math.sin(theta);\n      const z = radius * Math.cos(phi);\n      const speed = 0.001 + Math.random() / 10;\n      const scale = Math.cos(0.5 + Math.random() * 2.5);\n      temp.push({\n        phi,\n        theta,\n        radius,\n        speed,\n        x,\n        y,\n        z,\n        mx: 0,\n        my: 0,\n        scale\n      });\n    }\n    return temp;\n  }, [count]);\n  useFrame((state, delta) => {\n    easing.damp3(mesh.current.rotation, [0, -state.mouse.y * state.viewport.width * 2, 0], 0.75, delta);\n    particles.forEach((particle, i) => {\n      let {\n        phi,\n        theta,\n        radius,\n        speed,\n        scale\n      } = particle;\n      theta += speed / 20;\n      const x = radius * Math.sin(phi) * Math.cos(theta);\n      const y = 15 + radius * Math.sin(phi) * Math.sin(theta);\n      const z = radius * Math.cos(phi);\n      particle.phi = phi;\n      particle.theta = theta;\n      dummy.position.set(x, y, z);\n      dummy.scale.setScalar(scale);\n      dummy.rotation.set(phi, theta, 0);\n      dummy.updateMatrix();\n      mesh.current.setMatrixAt(i, dummy.matrix);\n    });\n    mesh.current.instanceMatrix.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"instancedMesh\", {\n    ref: mesh,\n    args: [null, null, count],\n    children: [/*#__PURE__*/_jsxDEV(\"dodecahedronGeometry\", {\n      args: [0.1, 0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"#b3b3b3\",\n      emissive: \"grey\",\n      emissiveIntensity: 2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(SnowFlakes, \"VFEz+mQXPQe8U4b7h6x5Lfp/400=\", false, function () {\n  return [useFrame];\n});\n_c = SnowFlakes;\nvar _c;\n$RefreshReg$(_c, \"SnowFlakes\");","map":{"version":3,"names":["useFrame","THREE","useMemo","useRef","Suspense","easing","jsxDEV","_jsxDEV","SnowFlakes","count","_s","mesh","dummy","Object3D","particles","temp","i","phi","Math","acos","random","theta","PI","radius","x","sin","cos","y","z","speed","scale","push","mx","my","state","delta","damp3","current","rotation","mouse","viewport","width","forEach","particle","position","set","setScalar","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","ref","args","children","fileName","_jsxFileName","lineNumber","columnNumber","color","emissive","emissiveIntensity","_c","$RefreshReg$"],"sources":["C:/Users/stefa/OneDrive/Desktop/Merry Christmas/src/SnowFlakes.js"],"sourcesContent":["import { useFrame } from '@react-three/fiber'\nimport * as THREE from 'three'\nimport { useMemo, useRef, Suspense } from 'react'\nimport { easing } from 'maath'\n\nexport default function SnowFlakes({ count }) {\n  const mesh = useRef()\n  const dummy = new THREE.Object3D()\n\n  const particles = useMemo(() => {\n    const temp = []\n    for (let i = 0; i < count; i++) {\n      const phi = Math.acos(-1 + Math.random() * 2)\n      const theta = Math.random() * 2 * Math.PI\n\n      const radius = 5 + Math.random() * 6.5\n      const x = radius * Math.sin(phi) * Math.cos(theta)\n      const y = radius * Math.sin(phi) * Math.sin(theta)\n      const z = radius * Math.cos(phi)\n\n      const speed = 0.001 + Math.random() / 10\n\n      const scale = Math.cos(0.5 + Math.random() * 2.5)\n\n      temp.push({ phi, theta, radius, speed, x, y, z, mx: 0, my: 0, scale })\n    }\n    return temp\n  }, [count])\n\n  useFrame((state, delta) => {\n    easing.damp3(mesh.current.rotation, [0, -state.mouse.y * state.viewport.width * 2, 0], 0.75, delta)\n\n    particles.forEach((particle, i) => {\n      let { phi, theta, radius, speed, scale } = particle\n      theta += speed / 20\n\n      const x = radius * Math.sin(phi) * Math.cos(theta)\n      const y = 15 + radius * Math.sin(phi) * Math.sin(theta)\n      const z = radius * Math.cos(phi)\n\n      particle.phi = phi\n      particle.theta = theta\n\n      dummy.position.set(x, y, z)\n      dummy.scale.setScalar(scale)\n      dummy.rotation.set(phi, theta, 0)\n      dummy.updateMatrix()\n\n      mesh.current.setMatrixAt(i, dummy.matrix)\n    })\n\n    mesh.current.instanceMatrix.needsUpdate = true\n  })\n\n  return (\n    <instancedMesh ref={mesh} args={[null, null, count]}>\n      <dodecahedronGeometry args={[0.1, 0]} />\n      <meshStandardMaterial color=\"#b3b3b3\" emissive=\"grey\" emissiveIntensity={2} />\n    </instancedMesh>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}