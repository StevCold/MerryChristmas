{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { DepthOfFieldEffect, MaskFunction } from \"postprocessing\";\nimport { forwardRef, useContext, useMemo, useEffect } from \"react\";\nimport { Vector3 } from \"three\";\nimport { EffectComposerContext } from \"../EffectComposer.js\";\nconst DepthOfField = forwardRef(function DepthOfField2({\n  blendFunction,\n  worldFocusDistance,\n  worldFocusRange,\n  focusDistance,\n  focusRange,\n  focalLength,\n  bokehScale,\n  resolutionScale,\n  resolutionX,\n  resolutionY,\n  width,\n  height,\n  target,\n  depthTexture,\n  ...props\n}, ref) {\n  const {\n    camera\n  } = useContext(EffectComposerContext);\n  const autoFocus = target != null;\n  const effect = useMemo(() => {\n    const effect2 = new DepthOfFieldEffect(camera, {\n      blendFunction,\n      worldFocusDistance,\n      worldFocusRange,\n      focusDistance,\n      focusRange,\n      focalLength,\n      bokehScale,\n      resolutionScale,\n      resolutionX,\n      resolutionY,\n      width,\n      height\n    });\n    if (autoFocus) effect2.target = new Vector3();\n    if (depthTexture) effect2.setDepthTexture(depthTexture.texture, depthTexture.packing);\n    const maskMaterial = effect2.maskPass.getFullscreenMaterial();\n    maskMaterial.maskFunction = MaskFunction.MULTIPLY_RGB_SET_ALPHA;\n    return effect2;\n  }, [camera, blendFunction, worldFocusDistance, worldFocusRange, focusDistance, focusRange, focalLength, bokehScale, resolutionScale, resolutionX, resolutionY, width, height, autoFocus, depthTexture]);\n  useEffect(() => {\n    return () => {\n      effect.dispose();\n    };\n  }, [effect]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ...props,\n    ref,\n    object: effect,\n    target\n  });\n});\nexport { DepthOfField };\n//# sourceMappingURL=DepthOfField.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}