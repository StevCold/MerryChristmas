{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { extend, useThree } from \"@react-three/fiber\";\nconst resolveRef = ref => typeof ref === \"object\" && ref != null && \"current\" in ref ? ref.current : ref;\nlet i = 0;\nconst components = /* @__PURE__ */new WeakMap();\nconst wrapEffect = (effect, defaults) => /* @__PURE__ */React.forwardRef(function Effect({\n  blendFunction = defaults == null ? void 0 : defaults.blendFunction,\n  opacity = defaults == null ? void 0 : defaults.opacity,\n  ...props\n}, ref) {\n  let Component = components.get(effect);\n  if (!Component) {\n    const key = `@react-three/postprocessing/${effect.name}-${i++}`;\n    extend({\n      [key]: effect\n    });\n    components.set(effect, Component = key);\n  }\n  const camera = useThree(state => state.camera);\n  const args = React.useMemo(() => {\n    var _a, _b;\n    return [...((_a = defaults == null ? void 0 : defaults.args) != null ? _a : []), ...((_b = props.args) != null ? _b : [{\n      ...defaults,\n      ...props\n    }])];\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [JSON.stringify(props)]);\n  return /* @__PURE__ */jsx(Component, {\n    camera,\n    \"blendMode-blendFunction\": blendFunction,\n    \"blendMode-opacity-value\": opacity,\n    ...props,\n    ref,\n    args\n  });\n});\nconst useVector2 = (props, key) => {\n  const value = props[key];\n  return React.useMemo(() => {\n    if (typeof value === \"number\") return new THREE.Vector2(value, value);else if (value) return new THREE.Vector2(...value);else return new THREE.Vector2();\n  }, [value]);\n};\nexport { resolveRef, useVector2, wrapEffect };\n//# sourceMappingURL=util.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}