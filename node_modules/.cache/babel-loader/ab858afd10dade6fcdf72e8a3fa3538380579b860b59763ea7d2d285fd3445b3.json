{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useContext, useMemo, useEffect } from \"react\";\nimport { SSREffect } from \"./screen-space-reflections.js\";\nimport { EffectComposerContext } from \"../../EffectComposer.js\";\nimport { selectionContext } from \"../../Selection.js\";\nimport { useThree } from \"@react-three/fiber\";\nconst SSR = forwardRef(function SSR2({\n  ENABLE_BLUR = true,\n  USE_MRT = true,\n  ...props\n}, ref) {\n  const {\n    invalidate\n  } = useThree();\n  const {\n    scene,\n    camera\n  } = useContext(EffectComposerContext);\n  const effect = useMemo(() => new SSREffect(scene, camera, {\n    ENABLE_BLUR,\n    USE_MRT,\n    ...props\n  }), [scene, camera, ENABLE_BLUR, USE_MRT, props]);\n  const api = useContext(selectionContext);\n  useEffect(() => {\n    var _a;\n    if (api && api.enabled) {\n      if ((_a = api.selected) == null ? void 0 : _a.length) {\n        effect.selection.set(api.selected);\n        invalidate();\n        return () => {\n          effect.selection.clear();\n          invalidate();\n        };\n      }\n    }\n  }, [api]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ref,\n    object: effect,\n    ...props\n  });\n});\nexport { SSR };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}