{"ast":null,"code":"import { Effect, Selection, Pass, RenderPass, DepthPass } from \"postprocessing\";\nimport { ShaderChunk, Color, Vector2, WebGLCubeRenderTarget, Uniform, CubeCamera, PMREMGenerator, LinearFilter, Vector3, Texture, WebGLRenderTarget, HalfFloatType, WebGLMultipleRenderTargets, Quaternion, NearestFilter, FramebufferTexture, RGBAFormat, ShaderMaterial, Matrix3, REVISION, TangentSpaceNormalMap, GLSL3, Matrix4, VideoTexture, DataTexture, FloatType } from \"three\";\nconst boxBlur = /* glsl */\n`\n  uniform float blur;\n  uniform float blurSharpness;\n  uniform int blurKernel;\n\n  vec3 denoise(\n    vec3 center,\n    sampler2D tex,\n    vec2 uv,\n    vec2 invTexSize,\n    float blur,\n    float blurSharpness,\n    int blurKernel\n  ) {\n    vec3 color, col;\n    float total, weight;\n\n    for (int x = -blurKernel; x <= blurKernel; x++) {\n      for (int y=-blurKernel; y<=blurKernel; y++) {\n        col = textureLod(tex, uv + vec2(x,y) * invTexSize, 0.0).rgb;\n        weight = 1.0-abs(dot(col - center, vec3(0.25)));\n        weight = pow(weight, blurSharpness);\n        color += col * weight;\n        total += weight;\n      }\n    }\n\n    return color / total;\n  }\n`;\nconst finalSSRShader = /* glsl */\n`\n  #define MODE_DEFAULT 0\n  #define MODE_REFLECTIONS 1\n  #define MODE_RAW_REFLECTION 2\n  #define MODE_BLURRED_REFLECTIONS 3\n  #define MODE_INPUT 4\n  #define MODE_BLUR_MIX 5\n  #define FLOAT_EPSILON 0.00001\n  // uniform sampler2D inputTexture;\n  uniform sampler2D reflectionsTexture;\n  // uniform float samples;\n\n  ${boxBlur}\n\n  void mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\n    vec4 reflectionsTexel=texture2D(reflectionsTexture, vUv);\n    ivec2 size = textureSize(reflectionsTexture, 0);\n    vec2 invTexSize= 1.0 / vec2(size.x, size.y);\n    vec3 reflectionClr = reflectionsTexel.xyz;\n    if (blur > FLOAT_EPSILON) {\n      vec3 blurredReflectionsColor = denoise(\n        reflectionsTexel.rgb,\n        reflectionsTexture,\n        vUv,\n        invTexSize,\n        blur,\n        blurSharpness,\n        blurKernel\n      );\n      reflectionClr = mix(reflectionClr, blurredReflectionsColor.rgb, blur);\n    }\n\n    #if RENDER_MODE == MODE_DEFAULT\n      outputColor = vec4(inputColor.rgb+reflectionClr, 1.0);\n    #endif\n    #if RENDER_MODE == MODE_REFLECTIONS\n      outputColor = vec4(reflectionClr, 1.0);\n    #endif\n    #if RENDER_MODE == MODE_RAW_REFLECTION\n      outputColor = vec4(reflectionsTexel.xyz, 1.0);\n    #endif\n    #if RENDER_MODE == MODE_BLURRED_REFLECTIONS\n      outputColor = vec4(blurredReflectionsTexel.xyz, 1.0);\n    #endif\n    #if RENDER_MODE == MODE_INPUT\n      outputColor = vec4(inputColor.xyz, 1.0);\n    #endif\n    #if RENDER_MODE == MODE_BLUR_MIX\n      outputColor = vec4(vec3(blur), 1.0);\n    #endif\n  }\n`;\nconst helperFunctions = /* glsl */\n`\n  vec3 getViewPosition(const float depth) {\n    float clipW= _projectionMatrix[2][3] * depth + _projectionMatrix[3][3];\n    vec4 clipPosition = vec4((vec3(vUv, depth) - 0.5) * 2.0, 1.0);\n    clipPosition *= clipW;\n    return(_inverseProjectionMatrix * clipPosition).xyz;\n  }\n\n  float getViewZ(const in float depth) {\n    #ifdef PERSPECTIVE_CAMERA\n      return perspectiveDepthToViewZ(depth, cameraNear, cameraFar);\n    #else\n      return orthographicDepthToViewZ(depth, cameraNear, cameraFar);\n    #endif\n  }\n\n  vec3 screenSpaceToWorldSpace(const vec2 uv,const float depth){\n    vec4 ndc = vec4((uv.x - 0.5) * 2.0,(uv.y - 0.5)* 2.0, (depth - 0.5) * 2.0, 1.0);\n    vec4 clip= _inverseProjectionMatrix*ndc;\n    vec4 view = cameraMatrixWorld * (clip / clip.w);\n    return view.xyz;\n  }\n\n  #define Scale (vec3(0.8, 0.8, 0.8))\n  #define K (19.19)\n\n  vec3 hash(vec3 a) {\n    a = fract(a * Scale);\n    a += dot(a, a.yxz + K);\n    return fract((a.xxy + a.yxx) * a.zyx);\n  }\n\n  float fresnel_dielectric_cos(float cosi, float eta){\n    float c = abs(cosi);\n    float g = eta * eta - 1.0 +  c* c;\n    float result;\n\n    if (g > 0.0){\n      g = sqrt(g);\n      float A = (g - c) / (g + c);\n      float B = (c* (g + c) - 1.0) / (c * (g - c) + 1.0);\n      result = 0.5 * A * A * (1.0 + B * B);\n    } else {\n      result = 1.0;\n    }\n    \n    return result;\n  }\n\n  float fresnel_dielectric(vec3 Incoming, vec3 Normal, float eta){\n    float cosine = dot(Incoming, Normal);\n    return min(1.0, 5.0 * fresnel_dielectric_cos(cosine, eta));\n  }\n`;\nconst trCompose = /* glsl */\n`\n  #define INV_EULER 0.36787944117144233\n\n  alpha = velocityDisocclusion < FLOAT_EPSILON ? (alpha + 0.0075) : 0.0;\n  alpha = clamp(alpha, 0.0, 1.0);\n  bool needsBlur = !didReproject || velocityDisocclusion > 0.5;\n\n  #ifdef boxBlur\n    if (needsBlur) inputColor = boxBlurredColor;\n  #endif\n\n  if (alpha == 1.0) {\n    outputColor = accumulatedColor;\n  } else {\n    float m = mix(alpha, 1.0, blend);\n    if (needsBlur) m = 0.0;\n    outputColor = accumulatedColor * m + inputColor * (1.0 - m);\n  }\n`;\nclass MRTMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      type: \"MRTMaterial\",\n      defines: {\n        USE_UV: \"\",\n        TEMPORAL_RESOLVE: \"\"\n      },\n      uniforms: {\n        opacity: new Uniform(1),\n        normalMap: new Uniform(null),\n        normalScale: new Uniform(new Vector2(1, 1)),\n        uvTransform: new Uniform(new Matrix3()),\n        roughness: new Uniform(1),\n        roughnessMap: new Uniform(null)\n      },\n      vertexShader: ( /* glsl */\n      `\n        #ifdef USE_MRT\n          varying vec2 vHighPrecisionZW;\n        #endif\n        #define NORMAL\n        #if defined(FLAT_SHADED) || defined(USE_BUMPMAP) || defined(TANGENTSPACE_NORMALMAP)\n          varying vec3 vViewPosition;\n        #endif\n        #include <common>\n        #include <uv_pars_vertex>\n        #include <displacementmap_pars_vertex>\n        #include <normal_pars_vertex>\n        #include <morphtarget_pars_vertex>\n        #include <skinning_pars_vertex>\n        #include <logdepthbuf_pars_vertex>\n        #include <clipping_planes_pars_vertex>\n        #ifdef USE_UV\n          ${REVISION.replace(/\\D+/g, \"\") >= 151 ? \"uniform mat3 uvTransform;\" : \"\"}\n        #endif\n        void main() {\n          #include <uv_vertex>\n          #include <beginnormal_vertex>\n          #include <morphnormal_vertex>\n          #include <skinbase_vertex>\n          #include <skinnormal_vertex>\n          #include <defaultnormal_vertex>\n          #include <normal_vertex>\n          #include <begin_vertex>\n          #include <morphtarget_vertex>\n          #include <skinning_vertex>\n          #include <displacementmap_vertex>\n          #include <project_vertex>\n          #include <logdepthbuf_vertex>\n          #include <clipping_planes_vertex>\n          #if defined(FLAT_SHADED) || defined(USE_BUMPMAP) || defined(TANGENTSPACE_NORMALMAP)\n            vViewPosition = -mvPosition.xyz;\n          #endif\n          #ifdef USE_MRT\n            vHighPrecisionZW = gl_Position.zw;\n          #endif\n          #ifdef USE_UV\n            vUv = (uvTransform * vec3(uv, 1)).xy;\n          #endif\n        }\n      `),\n      fragmentShader: ( /* glsl */\n      `\n        #define NORMAL\n        #if defined(FLAT_SHADED) || defined(USE_BUMPMAP) || defined(TANGENTSPACE_NORMALMAP)\n          varying vec3 vViewPosition;\n        #endif\n        #include <packing>\n        #include <uv_pars_fragment>\n        #include <normal_pars_fragment>\n        #include <bumpmap_pars_fragment>\n        #include <normalmap_pars_fragment>\n        #include <logdepthbuf_pars_fragment>\n        #include <clipping_planes_pars_fragment>\n        #include <roughnessmap_pars_fragment>\n\n        #ifdef USE_MRT\n          layout(location = 0) out vec4 gNormal;\n          layout(location = 1) out vec4 gDepth;\n          varying vec2 vHighPrecisionZW;\n        #endif\n        uniform float roughness;\n        void main() {\n          #include <clipping_planes_fragment>\n          #include <logdepthbuf_fragment>\n          #include <normal_fragment_begin>\n          #include <normal_fragment_maps>\n\n          float roughnessFactor = roughness;\n\n          if (roughness > 10.0e9){\n            roughnessFactor = 1.;\n          } else {\n            #ifdef useRoughnessMap\n              vec4 texelRoughness = texture2D(roughnessMap, vUv);\n              // reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n              roughnessFactor *= texelRoughness.g;\n            #endif\n          }\n\n          vec3 normalColor = packNormalToRGB(normal);\n          #ifdef USE_MRT\n            float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n            vec4 depthColor = packDepthToRGBA(fragCoordZ);\n            gNormal = vec4(normalColor, roughnessFactor);\n            gDepth = depthColor;\n          #else\n            gl_FragColor = vec4(normalColor, roughnessFactor);\n          #endif\n        }\n      `),\n      toneMapped: false\n    });\n    this.normalMapType = TangentSpaceNormalMap;\n    this.normalScale = new Vector2(1, 1);\n    Object.defineProperty(this, \"glslVersion\", {\n      get() {\n        return \"USE_MRT\" in this.defines ? GLSL3 : null;\n      },\n      set(_) {}\n    });\n  }\n}\nconst vertexShader = /* glsl */\n`\n  varying vec2 vUv;\n\n  void main() {\n    vUv = position.xy * 0.5 + 0.5;\n    gl_Position = vec4(position.xy, 1.0, 1.0);\n  }\n`;\nconst fragmentShader = /* glsl */\n`\n  varying vec2 vUv;\n  uniform sampler2D inputTexture;\n  uniform sampler2D accumulatedTexture;\n  uniform sampler2D normalTexture;\n  uniform sampler2D depthTexture;\n  uniform sampler2D envMap;\n  uniform mat4 _projectionMatrix;\n  uniform mat4 _inverseProjectionMatrix;\n  uniform mat4 cameraMatrixWorld;\n  uniform float cameraNear;\n  uniform float cameraFar;\n  uniform float rayDistance;\n  uniform float intensity;\n  uniform float maxDepthDifference;\n  uniform float roughnessFade;\n  uniform float maxRoughness;\n  uniform float fade;\n  uniform float thickness;\n  uniform float ior;\n  uniform float samples;\n  uniform float jitter;\n  uniform float jitterRoughness;\n\n  #define INVALID_RAY_COORDS vec2(-1.0);\n\n  #define EARLY_OUT_COLOR vec4(0.0, 0.0, 0.0, 1.0)\n  #define FLOAT_EPSILON 0.00001\n  float nearMinusFar;\n  float nearMulFar;\n  float farMinusNear;\n\n  #include <packing>\n\n  ${helperFunctions}\n\n  vec2 RayMarch(vec3 dir, inout vec3 hitPos, inout float rayHitDepthDifference);\n  vec2 BinarySearch(in vec3 dir, inout vec3 hitPos, inout float rayHitDepthDifference);\n  float fastGetViewZ(const in float depth);\n  vec3 getIBLRadiance(const in vec3 viewDir, const in vec3 normal, const in float roughness);\n\n  void main() {\n    vec4 depthTexel = textureLod(depthTexture, vUv, 0.0);\n\n    if (dot(depthTexel.rgb, depthTexel.rgb) < FLOAT_EPSILON) {\n      gl_FragColor = EARLY_OUT_COLOR;\n      return;\n    }\n\n    float unpackedDepth = unpackRGBAToDepth(depthTexel);\n    vec4 normalTexel = textureLod(normalTexture, vUv, 0.0);\n    float roughness = normalTexel.a;\n    float specular = 1.0 - roughness;\n\n    nearMinusFar = cameraNear - cameraFar;\n    nearMulFar = cameraNear * cameraFar;\n    farMinusNear = cameraFar - cameraNear;\n\n    normalTexel.rgb = unpackRGBToNormal(normalTexel.rgb);\n\n    float depth = fastGetViewZ(unpackedDepth);\n    vec3 viewPos = getViewPosition(depth);\n    vec3 viewDir = normalize(viewPos);\n    vec3 viewNormal = normalTexel.xyz;\n    vec3 worldPos = screenSpaceToWorldSpace(vUv, unpackedDepth);\n\n    vec3 jitt=vec3(0.0);\n    if (jitterRoughness != 0.0 || jitter!=0.0){\n      vec3 randomJitter = hash(50.0 * samples * worldPos) - 0.5;\n      float spread= ((2.0 - specular) + roughness * jitterRoughness);\n      float jitterMix = jitter * 0.25 + jitterRoughness * roughness;\n      if (jitterMix > 1.0) jitterMix = 1.0;\n      jitt = mix(vec3(0.0), randomJitter * spread, jitterMix);\n    }\n    \n    viewNormal += jitt;\n    float fresnelFactor = fresnel_dielectric(viewDir, viewNormal, ior);\n    vec3 iblRadiance = getIBLRadiance(-viewDir, viewNormal, 0.0) * fresnelFactor;\n    float lastFrameAlpha = textureLod(accumulatedTexture, vUv, 0.0).a;\n    if (roughness > maxRoughness || (roughness > 1.0 - FLOAT_EPSILON && roughnessFade > 1.0 - FLOAT_EPSILON)) {\n      gl_FragColor=vec4(iblRadiance,lastFrameAlpha);\n      return;\n    }\n    \n    vec3 reflected = reflect(viewDir, viewNormal);\n    vec3 rayDir = reflected *- viewPos.z;\n    vec3 hitPos = viewPos;\n    float rayHitDepthDifference;\n    vec2 coords = RayMarch(rayDir, hitPos, rayHitDepthDifference);\n    if (coords.x == -1.0){\n      gl_FragColor=vec4(iblRadiance, lastFrameAlpha);\n      return;\n    }\n    \n    vec4 SSRTexel = textureLod(inputTexture, coords.xy, 0.0);\n    vec4 SSRTexelReflected = textureLod(accumulatedTexture, coords.xy, 0.0);\n    vec3 SSR = SSRTexel.rgb + SSRTexelReflected.rgb;\n    float roughnessFactor = mix(specular, 1.0, max(0.0, 1.0 - roughnessFade));\n    vec2 coordsNDC = (coords.xy * 2.0 - 1.0);\n    float screenFade = 0.1;\n    float maxDimension = min(1.0, max(abs(coordsNDC.x), abs(coordsNDC.y)));\n    float reflectionIntensity = 1.0 - (max(0.0, maxDimension - screenFade) / (1.0 - screenFade));\n    reflectionIntensity = max(0.0, reflectionIntensity);\n    vec3 finalSSR = mix(iblRadiance, SSR, reflectionIntensity) * roughnessFactor;\n\n    if (fade != 0.0) {\n      vec3 hitWorldPos = screenSpaceToWorldSpace(coords, rayHitDepthDifference);\n      float reflectionDistance = distance(hitWorldPos, worldPos) + 1.0;\n      float opacity = 1.0 / (reflectionDistance * fade * 0.1);\n      if(opacity > 1.0) opacity=1.0;\n      finalSSR *= opacity;\n    }\n\n    finalSSR *= fresnelFactor * intensity;\n    finalSSR = min(vec3(1.0), finalSSR);\n    float alpha = hitPos.z == 1.0 ? 1.0 : SSRTexelReflected.a;\n    alpha = min(lastFrameAlpha, alpha);\n    gl_FragColor = vec4(finalSSR, alpha);\n  }\n\n  vec2 RayMarch(vec3 dir, inout vec3 hitPos, inout float rayHitDepthDifference) {\n    dir=normalize(dir);\n    dir *= rayDistance / float(steps);\n    float depth;\n    vec4 projectedCoord;\n    vec4 lastProjectedCoord;\n    float unpackedDepth;\n    vec4 depthTexel;\n\n    for (int i = 0; i < steps; i++) {\n      hitPos += dir;\n      projectedCoord = _projectionMatrix * vec4(hitPos, 1.0);\n      projectedCoord.xy /= projectedCoord.w;\n      projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;\n\n      #ifndef missedRays\n        if (\n          projectedCoord.x < 0.0 ||\n          projectedCoord.x > 1.0 ||\n          projectedCoord.y < 0.0 ||\n          projectedCoord.y > 1.0\n        ) {\n          return INVALID_RAY_COORDS;\n        }\n      #endif\n\n      depthTexel = textureLod(depthTexture, projectedCoord.xy, 0.0);\n      unpackedDepth = unpackRGBAToDepth(depthTexel);\n      depth = fastGetViewZ(unpackedDepth);\n      rayHitDepthDifference = depth - hitPos.z;\n\n      if (rayHitDepthDifference >= 0.0 && rayHitDepthDifference < thickness){\n        #if refineSteps == 0\n          if (dot(depthTexel.rgb, depthTexel.rgb) < FLOAT_EPSILON) return INVALID_RAY_COORDS;\n        #else\n          return BinarySearch(dir, hitPos, rayHitDepthDifference);\n        #endif\n      }\n\n      #ifndef missedRays\n        if (hitPos.z > 0.0) return INVALID_RAY_COORDS;\n      #endif\n\n      lastProjectedCoord = projectedCoord;\n    }\n    \n    hitPos.z = 1.0;\n\n    #ifndef missedRays\n      return INVALID_RAY_COORDS;\n    #endif\n\n    rayHitDepthDifference = unpackedDepth;\n\n    return projectedCoord.xy;\n  }\n\n  vec2 BinarySearch(in vec3 dir, inout vec3 hitPos, inout float rayHitDepthDifference) {\n    float depth;\n    vec4 projectedCoord;\n    vec2 lastMinProjectedCoordXY;\n    float unpackedDepth;\n    vec4 depthTexel;\n\n    for (int i = 0; i < refineSteps; i++){\n      projectedCoord = _projectionMatrix * vec4(hitPos, 1.0);\n      projectedCoord.xy /= projectedCoord.w;\n      projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;\n      depthTexel = textureLod(depthTexture, projectedCoord.xy, 0.0);\n      unpackedDepth = unpackRGBAToDepth(depthTexel);\n      depth = fastGetViewZ(unpackedDepth);\n      rayHitDepthDifference = depth - hitPos.z;\n      dir *= 0.5;\n\n      if (rayHitDepthDifference > 0.0) {\n        hitPos -= dir;\n      } else {\n        hitPos += dir;\n      }\n    }\n    \n    if (dot(depthTexel.rgb, depthTexel.rgb) < FLOAT_EPSILON) return INVALID_RAY_COORDS;\n    if (abs(rayHitDepthDifference) > maxDepthDifference) return INVALID_RAY_COORDS;\n\n    projectedCoord = _projectionMatrix*vec4(hitPos, 1.0);\n    projectedCoord.xy /= projectedCoord.w;\n    projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;\n    rayHitDepthDifference = unpackedDepth;\n    return projectedCoord.xy;\n  }\n\n  float fastGetViewZ(const in float depth){\n    #ifdef PERSPECTIVE_CAMERA\n      return nearMulFar / (farMinusNear * depth - cameraFar);\n    #else\n      return depth * nearMinusFar - cameraNear;\n    #endif\n  }\n\n  #include <common>\n  #include <cube_uv_reflection_fragment>\n\n  vec3 getIBLRadiance(const in vec3 viewDir, const in vec3 normal, const in float roughness){\n    #if defined(ENVMAP_TYPE_CUBE_UV)\n      vec3 reflectVec = reflect(-viewDir, normal);\n      reflectVec = normalize(mix(reflectVec, normal,roughness * roughness));\n      reflectVec = inverseTransformDirection(reflectVec, viewMatrix);\n      vec4 envMapColor = textureCubeUV(envMap, reflectVec, roughness);\n      return envMapColor.rgb * intensity;\n    #else\n      return vec3(0.0);\n    #endif\n  }\n`;\nclass ReflectionsMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      type: \"ReflectionsMaterial\",\n      uniforms: {\n        inputTexture: new Uniform(null),\n        accumulatedTexture: new Uniform(null),\n        normalTexture: new Uniform(null),\n        depthTexture: new Uniform(null),\n        _projectionMatrix: new Uniform(new Matrix4()),\n        _inverseProjectionMatrix: new Uniform(new Matrix4()),\n        cameraMatrixWorld: new Uniform(new Matrix4()),\n        cameraNear: new Uniform(0),\n        cameraFar: new Uniform(0),\n        rayDistance: new Uniform(0),\n        intensity: new Uniform(0),\n        roughnessFade: new Uniform(0),\n        fade: new Uniform(0),\n        thickness: new Uniform(0),\n        ior: new Uniform(0),\n        maxDepthDifference: new Uniform(0),\n        jitter: new Uniform(0),\n        jitterRoughness: new Uniform(0),\n        maxRoughness: new Uniform(0),\n        samples: new Uniform(0),\n        envMap: new Uniform(null),\n        envMapPosition: new Uniform(new Vector3()),\n        envMapSize: new Uniform(new Vector3()),\n        viewMatrix: new Uniform(new Matrix4())\n      },\n      defines: {\n        steps: 20,\n        refineSteps: 5,\n        CUBEUV_TEXEL_WIDTH: 0,\n        CUBEUV_TEXEL_HEIGHT: 0,\n        CUBEUV_MAX_MIP: 0,\n        vWorldPosition: \"worldPos\"\n      },\n      fragmentShader,\n      vertexShader,\n      toneMapped: false,\n      depthWrite: false,\n      depthTest: false\n    });\n  }\n}\nconst getVisibleChildren = object => {\n  const queue = [object];\n  const objects = [];\n  while (queue.length !== 0) {\n    const mesh = queue.shift();\n    if (mesh.material) objects.push(mesh);\n    for (const c of mesh.children) {\n      if (c.visible) queue.push(c);\n    }\n  }\n  return objects;\n};\nconst generateCubeUVSize = parameters => {\n  const imageHeight = parameters.envMapCubeUVHeight;\n  if (imageHeight === null) return null;\n  const maxMip = Math.log2(imageHeight) - 2;\n  const texelHeight = 1 / imageHeight;\n  const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));\n  return {\n    texelWidth,\n    texelHeight,\n    maxMip\n  };\n};\nconst setupEnvMap = (reflectionsMaterial, envMap, envMapCubeUVHeight) => {\n  reflectionsMaterial.uniforms.envMap.value = envMap;\n  const envMapCubeUVSize = generateCubeUVSize({\n    envMapCubeUVHeight\n  });\n  reflectionsMaterial.defines.ENVMAP_TYPE_CUBE_UV = \"\";\n  reflectionsMaterial.defines.CUBEUV_TEXEL_WIDTH = envMapCubeUVSize.texelWidth;\n  reflectionsMaterial.defines.CUBEUV_TEXEL_HEIGHT = envMapCubeUVSize.texelHeight;\n  reflectionsMaterial.defines.CUBEUV_MAX_MIP = envMapCubeUVSize.maxMip + \".0\";\n  reflectionsMaterial.needsUpdate = true;\n};\nconst isWebGL2Available = () => {\n  try {\n    const canvas = document.createElement(\"canvas\");\n    return !!(window.WebGL2RenderingContext && canvas.getContext(\"webgl2\"));\n  } catch (e) {\n    return false;\n  }\n};\nclass ReflectionsPass extends Pass {\n  constructor(ssrEffect, options = {}) {\n    super(\"ReflectionsPass\");\n    this.ssrEffect = void 0;\n    this.cachedMaterials = /* @__PURE__ */new WeakMap();\n    this.USE_MRT = false;\n    this.webgl1DepthPass = null;\n    this.visibleMeshes = [];\n    this.ssrEffect = ssrEffect;\n    this._scene = ssrEffect._scene;\n    this._camera = ssrEffect._camera;\n    this.fullscreenMaterial = new ReflectionsMaterial();\n    if (ssrEffect._camera.isPerspectiveCamera) this.fullscreenMaterial.defines.PERSPECTIVE_CAMERA = \"\";\n    const width = options.width || typeof window !== \"undefined\" ? window.innerWidth : 2e3;\n    const height = options.height || typeof window !== \"undefined\" ? window.innerHeight : 1e3;\n    this.renderTarget = new WebGLRenderTarget(width, height, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      type: HalfFloatType,\n      depthBuffer: false\n    });\n    this.renderPass = new RenderPass(this._scene, this._camera);\n    this.USE_MRT = isWebGL2Available();\n    if (this.USE_MRT) {\n      this.gBuffersRenderTarget = new WebGLMultipleRenderTargets(width, height, 2, {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter\n      });\n      this.normalTexture = this.gBuffersRenderTarget.texture[0];\n      this.depthTexture = this.gBuffersRenderTarget.texture[1];\n    } else {\n      this.webgl1DepthPass = new DepthPass(this._scene, this._camera);\n      this.webgl1DepthPass.renderTarget.minFilter = LinearFilter;\n      this.webgl1DepthPass.renderTarget.magFilter = LinearFilter;\n      this.webgl1DepthPass.renderTarget.texture.minFilter = LinearFilter;\n      this.webgl1DepthPass.renderTarget.texture.magFilter = LinearFilter;\n      this.webgl1DepthPass.setSize(typeof window !== \"undefined\" ? window.innerWidth : 2e3, typeof window !== \"undefined\" ? window.innerHeight : 1e3);\n      this.gBuffersRenderTarget = new WebGLRenderTarget(width, height, {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter\n      });\n      this.normalTexture = this.gBuffersRenderTarget.texture;\n      this.depthTexture = this.webgl1DepthPass.texture;\n    }\n    this.fullscreenMaterial.uniforms.normalTexture.value = this.normalTexture;\n    this.fullscreenMaterial.uniforms.depthTexture.value = this.depthTexture;\n    this.fullscreenMaterial.uniforms.accumulatedTexture.value = this.ssrEffect.temporalResolvePass.accumulatedTexture;\n    this.fullscreenMaterial.uniforms.cameraMatrixWorld.value = this._camera.matrixWorld;\n    this.fullscreenMaterial.uniforms._projectionMatrix.value = this._camera.projectionMatrix;\n    this.fullscreenMaterial.uniforms._inverseProjectionMatrix.value = this._camera.projectionMatrixInverse;\n  }\n  setSize(width, height) {\n    this.renderTarget.setSize(width * this.ssrEffect.resolutionScale, height * this.ssrEffect.resolutionScale);\n    this.gBuffersRenderTarget.setSize(width * this.ssrEffect.resolutionScale, height * this.ssrEffect.resolutionScale);\n    this.fullscreenMaterial.uniforms.accumulatedTexture.value = this.ssrEffect.temporalResolvePass.accumulatedTexture;\n    this.fullscreenMaterial.needsUpdate = true;\n  }\n  dispose() {\n    this.renderTarget.dispose();\n    this.gBuffersRenderTarget.dispose();\n    this.renderPass.dispose();\n    if (!this.USE_MRT) this.webgl1DepthPass.dispose();\n    this.fullscreenMaterial.dispose();\n    this.normalTexture = null;\n    this.depthTexture = null;\n    this.velocityTexture = null;\n  }\n  keepMaterialMapUpdated(mrtMaterial, originalMaterial, prop, define) {\n    if (this.ssrEffect[define]) {\n      if (originalMaterial[prop] !== mrtMaterial[prop]) {\n        mrtMaterial[prop] = originalMaterial[prop];\n        mrtMaterial.uniforms[prop].value = originalMaterial[prop];\n        if (originalMaterial[prop]) {\n          mrtMaterial.defines[define] = \"\";\n        } else {\n          delete mrtMaterial.defines[define];\n        }\n        mrtMaterial.needsUpdate = true;\n      }\n    } else if (mrtMaterial[prop] !== void 0) {\n      mrtMaterial[prop] = void 0;\n      mrtMaterial.uniforms[prop].value = void 0;\n      delete mrtMaterial.defines[define];\n      mrtMaterial.needsUpdate = true;\n    }\n  }\n  setMRTMaterialInScene() {\n    this.visibleMeshes = getVisibleChildren(this._scene);\n    for (const c of this.visibleMeshes) {\n      if (c.material) {\n        const originalMaterial = c.material;\n        let [cachedOriginalMaterial, mrtMaterial] = this.cachedMaterials.get(c) || [];\n        if (originalMaterial !== cachedOriginalMaterial) {\n          if (mrtMaterial) mrtMaterial.dispose();\n          mrtMaterial = new MRTMaterial();\n          if (this.USE_MRT) mrtMaterial.defines.USE_MRT = \"\";\n          mrtMaterial.normalScale = originalMaterial.normalScale;\n          mrtMaterial.uniforms.normalScale.value = originalMaterial.normalScale;\n          const map = originalMaterial.map || originalMaterial.normalMap || originalMaterial.roughnessMap || originalMaterial.metalnessMap;\n          if (map) mrtMaterial.uniforms.uvTransform.value = map.matrix;\n          this.cachedMaterials.set(c, [originalMaterial, mrtMaterial]);\n        }\n        this.keepMaterialMapUpdated(mrtMaterial, originalMaterial, \"normalMap\", \"useNormalMap\");\n        this.keepMaterialMapUpdated(mrtMaterial, originalMaterial, \"roughnessMap\", \"useRoughnessMap\");\n        mrtMaterial.uniforms.roughness.value = this.ssrEffect.selection.size === 0 || this.ssrEffect.selection.has(c) ? originalMaterial.roughness || 0 : 1e11;\n        c.material = mrtMaterial;\n      }\n    }\n  }\n  unsetMRTMaterialInScene() {\n    for (const c of this.visibleMeshes) {\n      var _c$material;\n      if (((_c$material = c.material) == null ? void 0 : _c$material.type) === \"MRTMaterial\") {\n        c.visible = true;\n        const [originalMaterial] = this.cachedMaterials.get(c);\n        c.material = originalMaterial;\n      }\n    }\n  }\n  render(renderer, inputBuffer) {\n    this.setMRTMaterialInScene();\n    renderer.setRenderTarget(this.gBuffersRenderTarget);\n    this.renderPass.render(renderer, this.gBuffersRenderTarget);\n    this.unsetMRTMaterialInScene();\n    if (!this.USE_MRT) this.webgl1DepthPass.renderPass.render(renderer, this.webgl1DepthPass.renderTarget);\n    this.fullscreenMaterial.uniforms.inputTexture.value = inputBuffer.texture;\n    this.fullscreenMaterial.uniforms.samples.value = this.ssrEffect.temporalResolvePass.samples;\n    this.fullscreenMaterial.uniforms.cameraNear.value = this._camera.near;\n    this.fullscreenMaterial.uniforms.cameraFar.value = this._camera.far;\n    this.fullscreenMaterial.uniforms.viewMatrix.value.copy(this._camera.matrixWorldInverse);\n    renderer.setRenderTarget(this.renderTarget);\n    renderer.render(this.scene, this.camera);\n  }\n}\nconst defaultSSROptions = {\n  intensity: 1,\n  exponent: 1,\n  distance: 10,\n  fade: 0,\n  roughnessFade: 1,\n  thickness: 10,\n  ior: 1.45,\n  maxRoughness: 1,\n  maxDepthDifference: 10,\n  blend: 0.9,\n  correction: 1,\n  correctionRadius: 1,\n  blur: 0.5,\n  blurKernel: 1,\n  blurSharpness: 10,\n  jitter: 0,\n  jitterRoughness: 0,\n  steps: 20,\n  refineSteps: 5,\n  missedRays: true,\n  useNormalMap: true,\n  useRoughnessMap: true,\n  resolutionScale: 1,\n  velocityResolutionScale: 1\n};\nconst temporalResolve = /* glsl */\n`\n  uniform sampler2D inputTexture;\n  uniform sampler2D accumulatedTexture;\n  uniform sampler2D velocityTexture;\n  uniform sampler2D lastVelocityTexture;\n  uniform float blend;\n  uniform float correction;\n  uniform float exponent;\n  uniform float samples;\n  uniform vec2 invTexSize;\n  uniform mat4 curInverseProjectionMatrix;\n  uniform mat4 curCameraMatrixWorld;\n  uniform mat4 prevInverseProjectionMatrix;\n  uniform mat4 prevCameraMatrixWorld;\n  varying vec2 vUv;\n\n  #define MAX_NEIGHBOR_DEPTH_DIFFERENCE 0.001\n  #define FLOAT_EPSILON 0.00001\n  #define FLOAT_ONE_MINUS_EPSILON 0.99999\n\n  vec3 transformexponent;\n  vec3 undoColorTransformExponent;\n\n  vec3 transformColor(vec3 color) {\n    if (exponent == 1.0) return color;\n    return pow(abs(color), transformexponent);\n  }\n\n  vec3 undoColorTransform(vec3 color) {\n    if (exponent == 1.0) return color;\n    return max(pow(abs(color), undoColorTransformExponent), vec3(0.0));\n  }\n\n  void main() {\n    if (exponent != 1.0){\n      transformexponent = vec3(1.0 / exponent);\n      undoColorTransformExponent = vec3(exponent);\n    }\n\n    vec4 inputTexel = textureLod(inputTexture, vUv, 0.0);\n    vec4 accumulatedTexel;\n    vec3 inputColor = transformColor(inputTexel.rgb);\n    vec3 accumulatedColor;\n    float alpha = inputTexel.a;\n    float velocityDisocclusion;\n    bool didReproject = false;\n\n    #ifdef boxBlur\n      vec3 boxBlurredColor = inputTexel.rgb;\n    #endif\n\n    vec4 velocity = textureLod(velocityTexture, vUv, 0.0);\n    bool isMoving = alpha < 1.0 || dot(velocity.xy, velocity.xy) > 0.0;\n    if (isMoving) {\n      vec3 minNeighborColor = inputColor;\n      vec3 maxNeighborColor = inputColor;\n      vec3 col;\n      vec2 neighborUv;\n      vec2 reprojectedUv = vUv-velocity.xy;\n      vec4 lastVelocity = textureLod(lastVelocityTexture, reprojectedUv, 0.0);\n      float depth = velocity.b;\n      float closestDepth = depth;\n      float lastClosestDepth = lastVelocity.b;\n      float neighborDepth;\n      float lastNeighborDepth;\n\n      for (int x = -correctionRadius; x <= correctionRadius; x++) {\n        for (int y = -correctionRadius; y <= correctionRadius; y++) {\n          if (x != 0 || y != 0) {\n            neighborUv = vUv + vec2(x,y) * invTexSize;\n            vec4 neigborVelocity = textureLod(velocityTexture, neighborUv, 0.0);\n            neighborDepth = neigborVelocity.b;\n            col = textureLod(inputTexture, neighborUv, 0.0).xyz;\n            int absX = abs(x);\n            int absY = abs(y);\n\n            #ifdef dilation\n              if (absX == 1 && absY == 1) {\n                if (neighborDepth > closestDepth) {\n                  velocity=neigborVelocity;\n                  closestDepth=neighborDepth;\n                }\n\n                vec4 lastNeighborVelocity = textureLod(velocityTexture, vUv + vec2(x, y) * invTexSize, 0.0);\n                lastNeighborDepth = lastNeighborVelocity.b;\n\n                if (neighborDepth > closestDepth) {\n                  lastVelocity = lastNeighborVelocity;\n                  lastClosestDepth = lastNeighborDepth;\n                }\n              }\n            #endif\n\n            if (abs(depth-neighborDepth) < MAX_NEIGHBOR_DEPTH_DIFFERENCE) {\n              #ifdef boxBlur\n                if (absX <= 2 && absY <= 2) boxBlurredColor += col;\n              #endif\n\n              col = transformColor(col);\n              minNeighborColor = min(col, minNeighborColor);\n              maxNeighborColor = max(col, maxNeighborColor);\n            }\n          }\n        }\n      }\n\n      float velocityLength = length(lastVelocity.xy - velocity.xy);\n      velocityDisocclusion = (velocityLength - 0.000005) * 10.0;\n      velocityDisocclusion *= velocityDisocclusion;\n      reprojectedUv = vUv - velocity.xy;\n\n      #ifdef boxBlur\n        float pxRadius = correctionRadius > 5 ? 121.0 : pow(float(correctionRadius * 2 + 1), 2.0);\n        boxBlurredColor /= pxRadius;\n        boxBlurredColor = transformColor(boxBlurredColor);\n      #endif\n\n      if (\n        reprojectedUv.x >=0.0 &&\n        reprojectedUv.x <= 1.0 &&\n        reprojectedUv.y >= 0.0 &&\n        reprojectedUv.y <= 1.0\n      ) {\n        accumulatedTexel = textureLod(accumulatedTexture, reprojectedUv, 0.0);\n        accumulatedColor = transformColor(accumulatedTexel.rgb);\n        vec3 clampedColor = clamp(accumulatedColor, minNeighborColor, maxNeighborColor);\n        accumulatedColor = mix(accumulatedColor, clampedColor, correction);\n        didReproject = true;\n      } else {\n        #ifdef boxBlur\n          accumulatedColor=boxBlurredColor;\n        #else\n          accumulatedColor=inputColor;\n        #endif\n      }\n\n      if (velocity.r > FLOAT_ONE_MINUS_EPSILON && velocity.g > FLOAT_ONE_MINUS_EPSILON) {\n        alpha = 0.0;\n        velocityDisocclusion = 1.0;\n      }\n    } else {\n      accumulatedColor = transformColor(textureLod(accumulatedTexture, vUv, 0.0).rgb);\n    }\n\n    vec3 outputColor = inputColor;\n\n    #include <custom_compose_shader>\n\n    gl_FragColor = vec4(undoColorTransform(outputColor), alpha);\n  }\n`;\nclass TemporalResolveMaterial extends ShaderMaterial {\n  constructor(customComposeShader) {\n    const fragmentShader2 = temporalResolve.replace(\"#include <custom_compose_shader>\", customComposeShader);\n    super({\n      type: \"TemporalResolveMaterial\",\n      uniforms: {\n        inputTexture: new Uniform(null),\n        accumulatedTexture: new Uniform(null),\n        velocityTexture: new Uniform(null),\n        lastVelocityTexture: new Uniform(null),\n        samples: new Uniform(1),\n        blend: new Uniform(0.5),\n        correction: new Uniform(1),\n        exponent: new Uniform(1),\n        invTexSize: new Uniform(new Vector2())\n      },\n      defines: {\n        correctionRadius: 1\n      },\n      vertexShader,\n      fragmentShader: fragmentShader2\n    });\n  }\n}\nconst prev_skinning_pars_vertex = /* glsl */\n`\n    #ifdef USE_SKINNING\n      #ifdef BONE_TEXTURE\n        uniform sampler2D prevBoneTexture;\n        mat4 getPrevBoneMatrix( const in float i ) {\n          float j = i * 4.0;\n          float x = mod( j, float( boneTextureSize ) );\n          float y = floor( j / float( boneTextureSize ) );\n          float dx = 1.0 / float( boneTextureSize );\n          float dy = 1.0 / float( boneTextureSize );\n          y = dy * ( y + 0.5 );\n          vec4 v1 = texture2D( prevBoneTexture, vec2( dx * ( x + 0.5 ), y ) );\n          vec4 v2 = texture2D( prevBoneTexture, vec2( dx * ( x + 1.5 ), y ) );\n          vec4 v3 = texture2D( prevBoneTexture, vec2( dx * ( x + 2.5 ), y ) );\n          vec4 v4 = texture2D( prevBoneTexture, vec2( dx * ( x + 3.5 ), y ) );\n          mat4 bone = mat4( v1, v2, v3, v4 );\n          return bone;\n        }\n      #else\n        uniform mat4 prevBoneMatrices[ MAX_BONES ];\n        mat4 getPrevBoneMatrix( const in float i ) {\n          mat4 bone = prevBoneMatrices[ int(i) ];\n          return bone;\n        }\n      #endif\n    #endif\n`;\nconst velocity_vertex = /* glsl */\n`\n    vec3 transformed;\n\n    // Get the normal\n    ${ShaderChunk.skinbase_vertex}\n    ${ShaderChunk.beginnormal_vertex}\n    ${ShaderChunk.skinnormal_vertex}\n    ${ShaderChunk.defaultnormal_vertex}\n\n    // Get the current vertex position\n    transformed = vec3( position );\n    ${ShaderChunk.skinning_vertex}\n    newPosition = velocityMatrix * vec4( transformed, 1.0 );\n\n    // Get the previous vertex position\n    transformed = vec3( position );\n    ${ShaderChunk.skinbase_vertex.replace(/mat4 /g, \"\").replace(/getBoneMatrix/g, \"getPrevBoneMatrix\")}\n    ${ShaderChunk.skinning_vertex.replace(/vec4 /g, \"\")}\n    prevPosition = prevVelocityMatrix * vec4( transformed, 1.0 );\n\n    gl_Position = newPosition;\n`;\nclass VelocityMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        prevVelocityMatrix: {\n          value: new Matrix4()\n        },\n        velocityMatrix: {\n          value: new Matrix4()\n        },\n        prevBoneTexture: {\n          value: null\n        },\n        interpolateGeometry: {\n          value: 0\n        },\n        intensity: {\n          value: 1\n        },\n        boneTexture: {\n          value: null\n        },\n        alphaTest: {\n          value: 0\n        },\n        map: {\n          value: null\n        },\n        alphaMap: {\n          value: null\n        },\n        opacity: {\n          value: 1\n        }\n      },\n      vertexShader: ( /* glsl */\n      `\n                    #define MAX_BONES 1024\n\n                    ${ShaderChunk.skinning_pars_vertex}\n                    ${prev_skinning_pars_vertex}\n\n                    uniform mat4 velocityMatrix;\n                    uniform mat4 prevVelocityMatrix;\n                    uniform float interpolateGeometry;\n                    varying vec4 prevPosition;\n                    varying vec4 newPosition;\n          varying vec2 vHighPrecisionZW;\n\n                    void main() {\n\n                        ${velocity_vertex}\n\n            vHighPrecisionZW = gl_Position.zw;\n\n                    }`),\n      fragmentShader: ( /* glsl */\n      `\n                    uniform float intensity;\n                    varying vec4 prevPosition;\n                    varying vec4 newPosition;\n          varying vec2 vHighPrecisionZW;\n\n                    void main() {\n            #ifdef FULL_MOVEMENT\n            gl_FragColor = vec4( 1., 1., 1. - gl_FragCoord.z, 0. );\n            return;\n            #endif\n\n                        vec2 pos0 = (prevPosition.xy / prevPosition.w) * 0.5 + 0.5;\n                        vec2 pos1 = (newPosition.xy / newPosition.w) * 0.5 + 0.5;\n\n                        vec2 vel = pos1 - pos0;\n\n            float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n                        gl_FragColor = vec4( vel, 1. - fragCoordZ, 0. );\n\n                    }`)\n    });\n    this.isVelocityMaterial = true;\n  }\n}\nconst backgroundColor = new Color(0);\nconst updateProperties = [\"visible\", \"wireframe\", \"side\"];\nclass VelocityPass extends Pass {\n  constructor(scene, camera) {\n    var _window, _window2;\n    super(\"VelocityPass\");\n    this.cachedMaterials = /* @__PURE__ */new WeakMap();\n    this.lastCameraTransform = {\n      position: new Vector3(),\n      quaternion: new Quaternion()\n    };\n    this.visibleMeshes = [];\n    this.renderedMeshesThisFrame = 0;\n    this.renderedMeshesLastFrame = 0;\n    this._scene = scene;\n    this._camera = camera;\n    this.renderTarget = new WebGLRenderTarget(((_window = window) == null ? void 0 : _window.innerWidth) || 1e3, ((_window2 = window) == null ? void 0 : _window2.innerHeight) || 1e3, {\n      type: HalfFloatType\n    });\n  }\n  setVelocityMaterialInScene() {\n    this.renderedMeshesThisFrame = 0;\n    this.visibleMeshes = getVisibleChildren(this._scene);\n    for (const c of this.visibleMeshes) {\n      var _c$skeleton2;\n      const originalMaterial = c.material;\n      let [cachedOriginalMaterial, velocityMaterial] = this.cachedMaterials.get(c) || [];\n      if (originalMaterial !== cachedOriginalMaterial) {\n        var _c$skeleton;\n        velocityMaterial = new VelocityMaterial();\n        velocityMaterial.lastMatrixWorld = new Matrix4();\n        c.material = velocityMaterial;\n        if ((_c$skeleton = c.skeleton) != null && _c$skeleton.boneTexture) this.saveBoneTexture(c);\n        this.cachedMaterials.set(c, [originalMaterial, velocityMaterial]);\n      }\n      velocityMaterial.uniforms.velocityMatrix.value.multiplyMatrices(this._camera.projectionMatrix, c.modelViewMatrix);\n      if (c.userData.needsUpdatedReflections || originalMaterial.map instanceof VideoTexture) {\n        if (!(\"FULL_MOVEMENT\" in velocityMaterial.defines)) velocityMaterial.needsUpdate = true;\n        velocityMaterial.defines.FULL_MOVEMENT = \"\";\n      } else {\n        if (\"FULL_MOVEMENT\" in velocityMaterial.defines) {\n          delete velocityMaterial.defines.FULL_MOVEMENT;\n          velocityMaterial.needsUpdate = true;\n        }\n      }\n      c.visible = this.cameraMovedThisFrame || !c.matrixWorld.equals(velocityMaterial.lastMatrixWorld) || c.skeleton || \"FULL_MOVEMENT\" in velocityMaterial.defines;\n      c.material = velocityMaterial;\n      if (!c.visible) continue;\n      this.renderedMeshesThisFrame++;\n      for (const prop of updateProperties) velocityMaterial[prop] = originalMaterial[prop];\n      if ((_c$skeleton2 = c.skeleton) != null && _c$skeleton2.boneTexture) {\n        velocityMaterial.defines.USE_SKINNING = \"\";\n        velocityMaterial.defines.BONE_TEXTURE = \"\";\n        velocityMaterial.uniforms.boneTexture.value = c.skeleton.boneTexture;\n      }\n    }\n  }\n  saveBoneTexture(object) {\n    let boneTexture = object.material.uniforms.prevBoneTexture.value;\n    if (boneTexture && boneTexture.image.width === object.skeleton.boneTexture.width) {\n      boneTexture = object.material.uniforms.prevBoneTexture.value;\n      boneTexture.image.data.set(object.skeleton.boneTexture.image.data);\n    } else {\n      var _boneTexture;\n      (_boneTexture = boneTexture) == null ? void 0 : _boneTexture.dispose();\n      const boneMatrices = object.skeleton.boneTexture.image.data.slice();\n      const size = object.skeleton.boneTexture.image.width;\n      boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n      object.material.uniforms.prevBoneTexture.value = boneTexture;\n      boneTexture.needsUpdate = true;\n    }\n  }\n  unsetVelocityMaterialInScene() {\n    for (const c of this.visibleMeshes) {\n      if (c.material.isVelocityMaterial) {\n        var _c$skeleton3;\n        c.visible = true;\n        c.material.lastMatrixWorld.copy(c.matrixWorld);\n        c.material.uniforms.prevVelocityMatrix.value.multiplyMatrices(this._camera.projectionMatrix, c.modelViewMatrix);\n        if ((_c$skeleton3 = c.skeleton) != null && _c$skeleton3.boneTexture) this.saveBoneTexture(c);\n        c.material = this.cachedMaterials.get(c)[0];\n      }\n    }\n  }\n  setSize(width, height) {\n    this.renderTarget.setSize(width, height);\n  }\n  renderVelocity(renderer) {\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.renderedMeshesThisFrame > 0) {\n      const {\n        background\n      } = this._scene;\n      this._scene.background = backgroundColor;\n      renderer.render(this._scene, this._camera);\n      this._scene.background = background;\n    } else {\n      renderer.clearColor();\n    }\n  }\n  checkCameraMoved() {\n    const moveDist = this.lastCameraTransform.position.distanceToSquared(this._camera.position);\n    const rotateDist = 8 * (1 - this.lastCameraTransform.quaternion.dot(this._camera.quaternion));\n    if (moveDist > 1e-6 || rotateDist > 1e-6) {\n      this.lastCameraTransform.position.copy(this._camera.position);\n      this.lastCameraTransform.quaternion.copy(this._camera.quaternion);\n      return true;\n    }\n    return false;\n  }\n  render(renderer) {\n    this.cameraMovedThisFrame = this.checkCameraMoved();\n    this.setVelocityMaterialInScene();\n    if (this.renderedMeshesThisFrame > 0 || this.renderedMeshesLastFrame > 0) this.renderVelocity(renderer);\n    this.unsetVelocityMaterialInScene();\n    this.renderedMeshesLastFrame = this.renderedMeshesThisFrame;\n  }\n}\nconst zeroVec2 = new Vector2();\nclass TemporalResolvePass extends Pass {\n  constructor(scene, camera, customComposeShader, options = {}) {\n    super(\"TemporalResolvePass\");\n    this.velocityPass = null;\n    this.velocityResolutionScale = 1;\n    this.samples = 1;\n    this.lastCameraTransform = {\n      position: new Vector3(),\n      quaternion: new Quaternion()\n    };\n    this._scene = scene;\n    this._camera = camera;\n    this.renderTarget = new WebGLRenderTarget(1, 1, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      type: HalfFloatType,\n      depthBuffer: false\n    });\n    this.velocityPass = new VelocityPass(scene, camera);\n    this.fullscreenMaterial = new TemporalResolveMaterial(customComposeShader);\n    this.fullscreenMaterial.defines.correctionRadius = options.correctionRadius || 1;\n    if (options.dilation) this.fullscreenMaterial.defines.dilation = \"\";\n    if (options.boxBlur) this.fullscreenMaterial.defines.boxBlur = \"\";\n    this.setupFramebuffers(1, 1);\n    this.checkCanUseSharedVelocityTexture();\n  }\n  dispose() {\n    if (this._scene.userData.velocityTexture === this.velocityPass.renderTarget.texture) {\n      delete this._scene.userData.velocityTexture;\n      delete this._scene.userData.lastVelocityTexture;\n    }\n    this.renderTarget.dispose();\n    this.accumulatedTexture.dispose();\n    this.fullscreenMaterial.dispose();\n    this.velocityPass.dispose();\n  }\n  setSize(width, height) {\n    this.renderTarget.setSize(width, height);\n    this.velocityPass.setSize(width * this.velocityResolutionScale, height * this.velocityResolutionScale);\n    this.velocityPass.renderTarget.texture.minFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.velocityPass.renderTarget.texture.magFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.velocityPass.renderTarget.texture.needsUpdate = true;\n    this.fullscreenMaterial.uniforms.invTexSize.value.set(1 / width, 1 / height);\n    this.setupFramebuffers(width, height);\n  }\n  setupFramebuffers(width, height) {\n    if (this.accumulatedTexture) this.accumulatedTexture.dispose();\n    if (this.lastVelocityTexture) this.lastVelocityTexture.dispose();\n    this.accumulatedTexture = new FramebufferTexture(width, height, RGBAFormat);\n    this.accumulatedTexture.minFilter = LinearFilter;\n    this.accumulatedTexture.magFilter = LinearFilter;\n    this.accumulatedTexture.type = HalfFloatType;\n    this.lastVelocityTexture = new FramebufferTexture(width * this.velocityResolutionScale, height * this.velocityResolutionScale, RGBAFormat);\n    this.lastVelocityTexture.minFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.lastVelocityTexture.magFilter = this.velocityResolutionScale === 1 ? NearestFilter : LinearFilter;\n    this.lastVelocityTexture.type = HalfFloatType;\n    this.fullscreenMaterial.uniforms.accumulatedTexture.value = this.accumulatedTexture;\n    this.fullscreenMaterial.uniforms.lastVelocityTexture.value = this.lastVelocityTexture;\n    this.fullscreenMaterial.needsUpdate = true;\n  }\n  checkCanUseSharedVelocityTexture() {\n    const canUseSharedVelocityTexture = this._scene.userData.velocityTexture && this.velocityPass.renderTarget.texture !== this._scene.userData.velocityTexture;\n    if (canUseSharedVelocityTexture) {\n      if (this.velocityPass.renderTarget.texture === this.fullscreenMaterial.uniforms.velocityTexture.value) {\n        this.fullscreenMaterial.uniforms.lastVelocityTexture.value = this._scene.userData.lastVelocityTexture;\n        this.fullscreenMaterial.uniforms.velocityTexture.value = this._scene.userData.velocityTexture;\n        this.fullscreenMaterial.needsUpdate = true;\n      }\n    } else {\n      if (this.velocityPass.renderTarget.texture !== this.fullscreenMaterial.uniforms.velocityTexture.value) {\n        this.fullscreenMaterial.uniforms.velocityTexture.value = this.velocityPass.renderTarget.texture;\n        this.fullscreenMaterial.uniforms.lastVelocityTexture.value = this.lastVelocityTexture;\n        this.fullscreenMaterial.needsUpdate = true;\n        if (!this._scene.userData.velocityTexture) {\n          this._scene.userData.velocityTexture = this.velocityPass.renderTarget.texture;\n          this._scene.userData.lastVelocityTexture = this.lastVelocityTexture;\n        }\n      }\n    }\n    return this.velocityPass.renderTarget.texture !== this.fullscreenMaterial.uniforms.velocityTexture.value;\n  }\n  checkNeedsResample() {\n    const moveDist = this.lastCameraTransform.position.distanceToSquared(this._camera.position);\n    const rotateDist = 8 * (1 - this.lastCameraTransform.quaternion.dot(this._camera.quaternion));\n    if (moveDist > 1e-6 || rotateDist > 1e-6) {\n      this.samples = 1;\n      this.lastCameraTransform.position.copy(this._camera.position);\n      this.lastCameraTransform.quaternion.copy(this._camera.quaternion);\n    }\n  }\n  render(renderer) {\n    this.samples++;\n    this.checkNeedsResample();\n    this.fullscreenMaterial.uniforms.samples.value = this.samples;\n    renderer.setRenderTarget(this.renderTarget);\n    renderer.render(this.scene, this.camera);\n    renderer.copyFramebufferToTexture(zeroVec2, this.accumulatedTexture);\n    renderer.setRenderTarget(this.velocityPass.renderTarget);\n    renderer.copyFramebufferToTexture(zeroVec2, this.lastVelocityTexture);\n  }\n}\nconst halton = function halton2(index, base) {\n  let fraction = 1;\n  let result = 0;\n  while (index > 0) {\n    fraction /= base;\n    result += fraction * (index % base);\n    index = ~~(index / base);\n  }\n  return result;\n};\nconst generateHalton23Points = count => {\n  const data = [];\n  let i = 1;\n  const end = i + count;\n  for (; i < end; i++) {\n    data.push([halton(i, 2) - 0.5, halton(i, 3) - 0.5]);\n  }\n  return data;\n};\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nconst worldposReplace = /* glsl */\n`\n#if defined( USE_ENVMAP ) || defined(  ) || defined ( USE_SHADOWMAP )\n    vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\n    #ifdef BOX_PROJECTED_ENV_MAP\n        vWorldPosition = worldPosition.xyz;\n    #endif\n#endif\n`;\nconst boxProjectDefinitions = /* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n    uniform vec3 envMapSize;\n    uniform vec3 envMapPosition;\n    varying vec3 vWorldPosition;\n\n    vec3 parallaxCorrectNormal( vec3 v, vec3 cubeSize, vec3 cubePos ) {\n        vec3 nDir = normalize( v );\n\n        vec3 rbmax = ( .5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n        vec3 rbmin = ( -.5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n\n        vec3 rbminmax;\n\n        rbminmax.x = ( nDir.x > 0. ) ? rbmax.x : rbmin.x;\n        rbminmax.y = ( nDir.y > 0. ) ? rbmax.y : rbmin.y;\n        rbminmax.z = ( nDir.z > 0. ) ? rbmax.z : rbmin.z;\n\n        float correction = min( min( rbminmax.x, rbminmax.y ), rbminmax.z );\n        vec3 boxIntersection = vWorldPosition + nDir * correction;\n\n        return boxIntersection - cubePos;\n    }\n#endif\n`;\nconst getIBLIrradiance_patch = /* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n    worldNormal = parallaxCorrectNormal( worldNormal, envMapSize, envMapPosition );\n#endif\n`;\nconst getIBLRadiance_patch = /* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n    reflectVec = parallaxCorrectNormal( reflectVec, envMapSize, envMapPosition );\n#endif\n`;\nfunction useBoxProjectedEnvMap(shader, envMapPosition, envMapSize) {\n  shader.defines.BOX_PROJECTED_ENV_MAP = \"\";\n  shader.uniforms.envMapPosition = {\n    value: envMapPosition\n  };\n  shader.uniforms.envMapSize = {\n    value: envMapSize\n  };\n  const line1 = new RegExp(escapeRegExp(\"vec3 worldNormal = inverseTransformDirection ( normal , viewMatrix ) ;\").replaceAll(\" \", \"\\\\s*\"), \"g\");\n  const line2 = new RegExp(escapeRegExp(\"reflectVec = inverseTransformDirection ( reflectVec , viewMatrix ) ;\").replaceAll(\" \", \"\\\\s*\"), \"g\");\n  shader.vertexShader = \"varying vec3 vWorldPosition;\\n\" + shader.vertexShader.replace(\"#include <worldpos_vertex>\", worldposReplace);\n  shader.fragmentShader = boxProjectDefinitions + \"\\n\" + shader.fragmentShader.replace(\"#include <envmap_physical_pars_fragment>\", ShaderChunk.envmap_physical_pars_fragment).replace(line1, `vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n                ${getIBLIrradiance_patch}`).replace(line2, `reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n                ${getIBLRadiance_patch}`);\n}\nconst noResetSamplesProperties = [\"blur\", \"blurSharpness\", \"blurKernel\"];\nconst defaultCubeRenderTarget = new WebGLCubeRenderTarget(1);\nlet pmremGenerator;\nclass SSREffect extends Effect {\n  /**\n   * @param {THREE.Scene} scene The scene of the SSR effect\n   * @param {THREE.Camera} camera The camera with which SSR is being rendered\n   * @param {SSROptions} [options] The optional options for the SSR effect\n   */\n  constructor(scene, camera, options = defaultSSROptions) {\n    super(\"SSREffect\", finalSSRShader, {\n      type: \"FinalSSRMaterial\",\n      uniforms: /* @__PURE__ */new Map([[\"reflectionsTexture\", new Uniform(null)], [\"blur\", new Uniform(0)], [\"blurSharpness\", new Uniform(0)], [\"blurKernel\", new Uniform(0)]]),\n      defines: /* @__PURE__ */new Map([[\"RENDER_MODE\", \"0\"]])\n    });\n    this.haltonSequence = generateHalton23Points(1024);\n    this.haltonIndex = 0;\n    this.selection = new Selection();\n    this.lastSize = void 0;\n    this.cubeCamera = new CubeCamera(1e-3, 1e3, defaultCubeRenderTarget);\n    this.usingBoxProjectedEnvMap = false;\n    this._scene = scene;\n    this._camera = camera;\n    const trOptions = {\n      boxBlur: true,\n      dilation: true\n    };\n    options = {\n      ...defaultSSROptions,\n      ...options,\n      ...trOptions\n    };\n    this.temporalResolvePass = new TemporalResolvePass(scene, camera, trCompose, options);\n    this.uniforms.get(\"reflectionsTexture\").value = this.temporalResolvePass.renderTarget.texture;\n    this.reflectionsPass = new ReflectionsPass(this, options);\n    this.temporalResolvePass.fullscreenMaterial.uniforms.inputTexture.value = this.reflectionsPass.renderTarget.texture;\n    this.lastSize = {\n      width: options.width,\n      height: options.height,\n      resolutionScale: options.resolutionScale,\n      velocityResolutionScale: options.velocityResolutionScale\n    };\n    this.setSize(options.width, options.height);\n    this.makeOptionsReactive(options);\n  }\n  makeOptionsReactive(options) {\n    let needsUpdate = false;\n    const reflectionPassFullscreenMaterialUniforms = this.reflectionsPass.fullscreenMaterial.uniforms;\n    const reflectionPassFullscreenMaterialUniformsKeys = Object.keys(reflectionPassFullscreenMaterialUniforms);\n    for (const key of Object.keys(options)) {\n      Object.defineProperty(this, key, {\n        get() {\n          return options[key];\n        },\n        set(value) {\n          if (options[key] === value && needsUpdate) return;\n          options[key] = value;\n          if (!noResetSamplesProperties.includes(key)) {\n            this.setSize(this.lastSize.width, this.lastSize.height, true);\n          }\n          switch (key) {\n            case \"resolutionScale\":\n              this.setSize(this.lastSize.width, this.lastSize.height);\n              break;\n            case \"velocityResolutionScale\":\n              this.temporalResolvePass.velocityResolutionScale = value;\n              this.setSize(this.lastSize.width, this.lastSize.height, true);\n              break;\n            case \"blur\":\n              this.uniforms.get(\"blur\").value = value;\n              break;\n            case \"blurSharpness\":\n              this.uniforms.get(\"blurSharpness\").value = value;\n              break;\n            case \"blurKernel\":\n              this.uniforms.get(\"blurKernel\").value = value;\n              break;\n            case \"steps\":\n              this.reflectionsPass.fullscreenMaterial.defines.steps = parseInt(value);\n              this.reflectionsPass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n            case \"refineSteps\":\n              this.reflectionsPass.fullscreenMaterial.defines.refineSteps = parseInt(value);\n              this.reflectionsPass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n            case \"missedRays\":\n              if (value) {\n                this.reflectionsPass.fullscreenMaterial.defines.missedRays = \"\";\n              } else {\n                delete this.reflectionsPass.fullscreenMaterial.defines.missedRays;\n              }\n              this.reflectionsPass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n            case \"correctionRadius\":\n              this.temporalResolvePass.fullscreenMaterial.defines.correctionRadius = Math.round(value);\n              this.temporalResolvePass.fullscreenMaterial.needsUpdate = needsUpdate;\n              break;\n            case \"blend\":\n              this.temporalResolvePass.fullscreenMaterial.uniforms.blend.value = value;\n              break;\n            case \"correction\":\n              this.temporalResolvePass.fullscreenMaterial.uniforms.correction.value = value;\n              break;\n            case \"exponent\":\n              this.temporalResolvePass.fullscreenMaterial.uniforms.exponent.value = value;\n              break;\n            case \"distance\":\n              reflectionPassFullscreenMaterialUniforms.rayDistance.value = value;\n            default:\n              if (reflectionPassFullscreenMaterialUniformsKeys.includes(key)) {\n                reflectionPassFullscreenMaterialUniforms[key].value = value;\n              }\n          }\n        }\n      });\n      this[key] = options[key];\n    }\n    needsUpdate = true;\n  }\n  setSize(width, height, force = false) {\n    if (!force && width === this.lastSize.width && height === this.lastSize.height && this.resolutionScale === this.lastSize.resolutionScale && this.velocityResolutionScale === this.lastSize.velocityResolutionScale) return;\n    this.temporalResolvePass.setSize(width, height);\n    this.reflectionsPass.setSize(width, height);\n    this.lastSize = {\n      width,\n      height,\n      resolutionScale: this.resolutionScale,\n      velocityResolutionScale: this.velocityResolutionScale\n    };\n  }\n  generateBoxProjectedEnvMapFallback(renderer, position = new Vector3(), size = new Vector3(), envMapSize = 512) {\n    this.cubeCamera.renderTarget.dispose();\n    this.cubeCamera.renderTarget = new WebGLCubeRenderTarget(envMapSize);\n    this.cubeCamera.position.copy(position);\n    this.cubeCamera.updateMatrixWorld();\n    this.cubeCamera.update(renderer, this._scene);\n    if (!pmremGenerator) {\n      pmremGenerator = new PMREMGenerator(renderer);\n      pmremGenerator.compileCubemapShader();\n    }\n    const envMap = pmremGenerator.fromCubemap(this.cubeCamera.renderTarget.texture).texture;\n    envMap.minFilter = LinearFilter;\n    envMap.magFilter = LinearFilter;\n    const reflectionsMaterial = this.reflectionsPass.fullscreenMaterial;\n    useBoxProjectedEnvMap(reflectionsMaterial, position, size);\n    reflectionsMaterial.fragmentShader = reflectionsMaterial.fragmentShader.replace(\"vec3 worldPos\", \"worldPos\").replace(\"varying vec3 vWorldPosition;\", \"vec3 worldPos;\");\n    reflectionsMaterial.uniforms.envMapPosition.value.copy(position);\n    reflectionsMaterial.uniforms.envMapSize.value.copy(size);\n    setupEnvMap(reflectionsMaterial, envMap, envMapSize);\n    this.usingBoxProjectedEnvMap = true;\n    return envMap;\n  }\n  setIBLRadiance(iblRadiance, renderer) {\n    this._scene.traverse(c => {\n      if (c.material) {\n        var _renderer$properties$;\n        const uniforms = (_renderer$properties$ = renderer.properties.get(c.material)) == null ? void 0 : _renderer$properties$.uniforms;\n        if (uniforms && \"disableIBLRadiance\" in uniforms) {\n          uniforms.disableIBLRadiance.value = iblRadiance;\n        }\n      }\n    });\n  }\n  deleteBoxProjectedEnvMapFallback() {\n    const reflectionsMaterial = this.reflectionsPass.fullscreenMaterial;\n    reflectionsMaterial.uniforms.envMap.value = null;\n    reflectionsMaterial.fragmentShader = reflectionsMaterial.fragmentShader.replace(\"worldPos = \", \"vec3 worldPos = \");\n    delete reflectionsMaterial.defines.BOX_PROJECTED_ENV_MAP;\n    reflectionsMaterial.needsUpdate = true;\n    this.usingBoxProjectedEnvMap = false;\n  }\n  dispose() {\n    super.dispose();\n    this.reflectionsPass.dispose();\n    this.temporalResolvePass.dispose();\n  }\n  update(renderer, inputBuffer) {\n    if (!this.usingBoxProjectedEnvMap && this._scene.environment) {\n      const reflectionsMaterial = this.reflectionsPass.fullscreenMaterial;\n      let envMap = null;\n      this._scene.traverse(c => {\n        if (!envMap && c.material && !c.material.envMap) {\n          const properties = renderer.properties.get(c.material);\n          if (\"envMap\" in properties && properties.envMap instanceof Texture) envMap = properties.envMap;\n        }\n      });\n      if (envMap) {\n        const envMapCubeUVHeight = this._scene.environment.image.height;\n        setupEnvMap(reflectionsMaterial, envMap, envMapCubeUVHeight);\n      }\n    }\n    this.haltonIndex = (this.haltonIndex + 1) % this.haltonSequence.length;\n    const [x, y] = this.haltonSequence[this.haltonIndex];\n    const {\n      width,\n      height\n    } = this.lastSize;\n    this.temporalResolvePass.velocityPass.render(renderer);\n    if (this._camera.setViewOffset) this._camera.setViewOffset(width, height, x, y, width, height);\n    this.reflectionsPass.render(renderer, inputBuffer);\n    this.temporalResolvePass.render(renderer);\n    this._camera.clearViewOffset();\n  }\n  static patchDirectEnvIntensity(envMapIntensity = 0) {\n    if (envMapIntensity === 0) {\n      ShaderChunk.envmap_physical_pars_fragment = ShaderChunk.envmap_physical_pars_fragment.replace(\"vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\", \"vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) { return vec3(0.0);\");\n    } else {\n      ShaderChunk.envmap_physical_pars_fragment = ShaderChunk.envmap_physical_pars_fragment.replace(\"vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\", \"vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness ) * \" + envMapIntensity.toFixed(5) + \";\");\n    }\n  }\n}\nexport { SSREffect, defaultSSROptions };\n//# sourceMappingURL=screen-space-reflections.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}