{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stefa\\\\OneDrive\\\\Desktop\\\\Merry Christmas\\\\src\\\\FireWorksMaterial.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo, useEffect } from 'react';\nimport { shaderMaterial } from '@react-three/drei';\nimport { extend, useFrame, useThree } from '@react-three/fiber';\nimport { FrontSide, AdditiveBlending, Vector2 } from 'three';\n\n/**\n * Fireworks component by Anderson Mancini.\n * Based on https://www.shadertoy.com/view/4dBGRw\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FireWorksMaterial() {\n  _s();\n  const {\n    size,\n    viewport\n  } = useThree();\n  const ref = useRef();\n  const FireWorksMaterial = useMemo(() => {\n    return shaderMaterial({\n      time: 0,\n      iResolution: new Vector2(size.width, size.height)\n    }, ` \n      varying vec2 vUv;\n      void main() {\n  \n        vUv = uv;     \n        gl_Position = vec4(position, 1.0);\n\n      }`, ` \n        varying vec2 vUv;\n        uniform float time;\n        uniform vec2 iResolution;\n\n        vec3 texture(vec2 pos, vec2 rocketpos){\n            float d = (pos.x-rocketpos.x)+(pos.y-rocketpos.y);\n            vec3 col=vec3(1.0);\t\n\n            d = mod(d*15.,2.0);\n            if(d>1.0){\n                col=vec3(0.0,0.0,1.0);\n            }\n            return col;\t\n        }\n\n        vec3 rocket(vec2 pos, vec2 rocketpos){\n            vec3 col = vec3(0.0);\n            float f = 0.;\n            float absx= abs(rocketpos.x - pos.x);\n            float absy = abs(rocketpos.y-pos.y);\n            if(absx<0.05&&absy<0.15){\n                col=texture(pos, rocketpos);\t\n            }\n            float point=(rocketpos.y-pos.y-0.25)*-0.7;\n            if((rocketpos.y-pos.y)>0.1){\n                f=smoothstep(point-0.001,point+0.001,absx);\n                \n                col=mix(vec3(1.0,0.0,0.0),col, f);\t\n            }\n            return col;\n        }\n\n        float rand(float val, float seed){return cos(val*sin(val*seed)*seed);}\n        float distance2( in vec2 a, in vec2 b ) { return dot(a-b,a-b); }\n        mat2 rr = mat2( cos(1.0), -sin(1.0), sin(1.0), cos(1.0) );\n\n        vec3 drawParticles(vec2 pos, vec3 particolor, float time, vec2 cpos, float gravity, float seed, float timelength){\n            vec3 col= vec3(0.0);\n            vec2 pp = vec2(1.0,0.0);\n            for(float i=1.0;i<=64.0;i++){\n                float d=rand(i, seed);\n                float fade=(i/64.0)*time;\n                vec2 particpos = cpos + time*pp*d;\n                pp = rr*pp;\n                col = mix(particolor/fade, col, smoothstep(0.0, 0.0001, distance2(particpos, pos)));\n            }\n            col*=smoothstep(0.0,1.0,(timelength-time)/timelength);\n            \n            return col;\n        }\n        \n        vec3 drawFireworks(float time, vec2 uv, vec3 particolor, float seed){\n            \n            float timeoffset = 1.0;\n            vec3 col=vec3(0.0);\n            if(time<=0.){\n                return col;\t\n            }\n            if(mod(time, 2.0)>timeoffset){\n                col= drawParticles(uv, particolor, mod(time, 2.0)-timeoffset, vec2(rand(ceil(time/2.0),seed),-0.5), 0.5, ceil(time/2.0), seed);\n            }else{\n                col= rocket(uv*15., vec2(15.*rand(ceil(time/2.0),seed),15.*(-0.5+(timeoffset-mod(time, 2.0)))));\t\n            }\n\n            return col;\t\n        }\n\n        void main() {\n            vec3 col=vec3(0.1,0.1,0.2);\n            vec2 uv =1.0 -  2.0* gl_FragCoord.xy / iResolution.xy;\n\t          uv.x *= iResolution.x/iResolution.y;     \n            col += drawFireworks(time    , uv,vec3(1.0,0.1,0.1), 1.);\n            col += drawFireworks(time-.6, uv,vec3(0.0,1.0,0.5), 1.2);\n            col += drawFireworks(time-0.9, uv,vec3(1.0,1.0,0.1), 1.9);\n            col += drawFireworks(time-0.1, uv,vec3(1.0,1.0,0.1), 1.1);\n\n            col -= 0.15;\n            gl_FragColor = vec4(col, 1.0);\n        }`);\n  }, []);\n  extend({\n    FireWorksMaterial\n  });\n  useFrame((state, delta) => {\n    ref.current.time += delta;\n  });\n  useEffect(() => {\n    ref.current.iResolution.set(size.width, size.height);\n  }, [viewport]);\n  return /*#__PURE__*/_jsxDEV(\"fireWorksMaterial\", {\n    side: FrontSide,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true,\n    blending: AdditiveBlending,\n    ref: ref\n  }, FireWorksMaterial.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(FireWorksMaterial, \"Z4LkIO50Vq38Rk2kdukbjXqYVVU=\", false, function () {\n  return [useThree, useFrame];\n});\n_c = FireWorksMaterial;\nvar _c;\n$RefreshReg$(_c, \"FireWorksMaterial\");","map":{"version":3,"names":["React","useRef","useMemo","useEffect","shaderMaterial","extend","useFrame","useThree","FrontSide","AdditiveBlending","Vector2","jsxDEV","_jsxDEV","FireWorksMaterial","_s","size","viewport","ref","time","iResolution","width","height","state","delta","current","set","side","depthTest","depthWrite","transparent","blending","key","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/stefa/OneDrive/Desktop/Merry Christmas/src/FireWorksMaterial.js"],"sourcesContent":["import React, { useRef, useMemo, useEffect } from 'react'\nimport { shaderMaterial } from '@react-three/drei'\nimport { extend, useFrame, useThree } from '@react-three/fiber'\nimport { FrontSide, AdditiveBlending, Vector2 } from 'three'\n\n/**\n * Fireworks component by Anderson Mancini.\n * Based on https://www.shadertoy.com/view/4dBGRw\n */\n\nexport default function FireWorksMaterial() {\n  const { size, viewport } = useThree()\n  const ref = useRef()\n\n  const FireWorksMaterial = useMemo(() => {\n    return shaderMaterial(\n      {\n        time: 0,\n        iResolution: new Vector2(size.width, size.height)\n      },\n      ` \n      varying vec2 vUv;\n      void main() {\n  \n        vUv = uv;     \n        gl_Position = vec4(position, 1.0);\n\n      }`,\n      ` \n        varying vec2 vUv;\n        uniform float time;\n        uniform vec2 iResolution;\n\n        vec3 texture(vec2 pos, vec2 rocketpos){\n            float d = (pos.x-rocketpos.x)+(pos.y-rocketpos.y);\n            vec3 col=vec3(1.0);\t\n\n            d = mod(d*15.,2.0);\n            if(d>1.0){\n                col=vec3(0.0,0.0,1.0);\n            }\n            return col;\t\n        }\n\n        vec3 rocket(vec2 pos, vec2 rocketpos){\n            vec3 col = vec3(0.0);\n            float f = 0.;\n            float absx= abs(rocketpos.x - pos.x);\n            float absy = abs(rocketpos.y-pos.y);\n            if(absx<0.05&&absy<0.15){\n                col=texture(pos, rocketpos);\t\n            }\n            float point=(rocketpos.y-pos.y-0.25)*-0.7;\n            if((rocketpos.y-pos.y)>0.1){\n                f=smoothstep(point-0.001,point+0.001,absx);\n                \n                col=mix(vec3(1.0,0.0,0.0),col, f);\t\n            }\n            return col;\n        }\n\n        float rand(float val, float seed){return cos(val*sin(val*seed)*seed);}\n        float distance2( in vec2 a, in vec2 b ) { return dot(a-b,a-b); }\n        mat2 rr = mat2( cos(1.0), -sin(1.0), sin(1.0), cos(1.0) );\n\n        vec3 drawParticles(vec2 pos, vec3 particolor, float time, vec2 cpos, float gravity, float seed, float timelength){\n            vec3 col= vec3(0.0);\n            vec2 pp = vec2(1.0,0.0);\n            for(float i=1.0;i<=64.0;i++){\n                float d=rand(i, seed);\n                float fade=(i/64.0)*time;\n                vec2 particpos = cpos + time*pp*d;\n                pp = rr*pp;\n                col = mix(particolor/fade, col, smoothstep(0.0, 0.0001, distance2(particpos, pos)));\n            }\n            col*=smoothstep(0.0,1.0,(timelength-time)/timelength);\n            \n            return col;\n        }\n        \n        vec3 drawFireworks(float time, vec2 uv, vec3 particolor, float seed){\n            \n            float timeoffset = 1.0;\n            vec3 col=vec3(0.0);\n            if(time<=0.){\n                return col;\t\n            }\n            if(mod(time, 2.0)>timeoffset){\n                col= drawParticles(uv, particolor, mod(time, 2.0)-timeoffset, vec2(rand(ceil(time/2.0),seed),-0.5), 0.5, ceil(time/2.0), seed);\n            }else{\n                col= rocket(uv*15., vec2(15.*rand(ceil(time/2.0),seed),15.*(-0.5+(timeoffset-mod(time, 2.0)))));\t\n            }\n\n            return col;\t\n        }\n\n        void main() {\n            vec3 col=vec3(0.1,0.1,0.2);\n            vec2 uv =1.0 -  2.0* gl_FragCoord.xy / iResolution.xy;\n\t          uv.x *= iResolution.x/iResolution.y;     \n            col += drawFireworks(time    , uv,vec3(1.0,0.1,0.1), 1.);\n            col += drawFireworks(time-.6, uv,vec3(0.0,1.0,0.5), 1.2);\n            col += drawFireworks(time-0.9, uv,vec3(1.0,1.0,0.1), 1.9);\n            col += drawFireworks(time-0.1, uv,vec3(1.0,1.0,0.1), 1.1);\n\n            col -= 0.15;\n            gl_FragColor = vec4(col, 1.0);\n        }`\n    )\n  }, [])\n\n  extend({ FireWorksMaterial })\n\n  useFrame((state, delta) => {\n    ref.current.time += delta\n  })\n\n  useEffect(() => {\n    ref.current.iResolution.set(size.width, size.height)\n  }, [viewport])\n\n  return (\n    <fireWorksMaterial\n      key={FireWorksMaterial.key}\n      side={FrontSide}\n      depthTest={false}\n      depthWrite={false}\n      transparent={true}\n      blending={AdditiveBlending}\n      ref={ref}\n    />\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AACzD,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,oBAAoB;AAC/D,SAASC,SAAS,EAAEC,gBAAgB,EAAEC,OAAO,QAAQ,OAAO;;AAE5D;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAKA,eAAe,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC1C,MAAM;IAAEC,IAAI;IAAEC;EAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC;EACrC,MAAMU,GAAG,GAAGhB,MAAM,CAAC,CAAC;EAEpB,MAAMY,iBAAiB,GAAGX,OAAO,CAAC,MAAM;IACtC,OAAOE,cAAc,CACnB;MACEc,IAAI,EAAE,CAAC;MACPC,WAAW,EAAE,IAAIT,OAAO,CAACK,IAAI,CAACK,KAAK,EAAEL,IAAI,CAACM,MAAM;IAClD,CAAC,EACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,EACD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UACI,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENhB,MAAM,CAAC;IAAEQ;EAAkB,CAAC,CAAC;EAE7BP,QAAQ,CAAC,CAACgB,KAAK,EAAEC,KAAK,KAAK;IACzBN,GAAG,CAACO,OAAO,CAACN,IAAI,IAAIK,KAAK;EAC3B,CAAC,CAAC;EAEFpB,SAAS,CAAC,MAAM;IACdc,GAAG,CAACO,OAAO,CAACL,WAAW,CAACM,GAAG,CAACV,IAAI,CAACK,KAAK,EAAEL,IAAI,CAACM,MAAM,CAAC;EACtD,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAEd,oBACEJ,OAAA;IAEEc,IAAI,EAAElB,SAAU;IAChBmB,SAAS,EAAE,KAAM;IACjBC,UAAU,EAAE,KAAM;IAClBC,WAAW,EAAE,IAAK;IAClBC,QAAQ,EAAErB,gBAAiB;IAC3BQ,GAAG,EAAEA;EAAI,GANJJ,iBAAiB,CAACkB,GAAG;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAO3B,CAAC;AAEN;AAACrB,EAAA,CA1HuBD,iBAAiB;EAAA,QACZN,QAAQ,EAsGnCD,QAAQ;AAAA;AAAA8B,EAAA,GAvGcvB,iBAAiB;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}