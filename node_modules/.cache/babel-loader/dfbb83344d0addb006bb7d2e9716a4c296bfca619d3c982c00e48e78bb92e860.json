{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { GlitchEffect, GlitchMode } from \"postprocessing\";\nimport { forwardRef, useMemo, useLayoutEffect, useEffect } from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport { useVector2 } from \"../util.js\";\nconst Glitch = forwardRef(function Glitch2({\n  active = true,\n  ...props\n}, ref) {\n  const invalidate = useThree(state => state.invalidate);\n  const delay = useVector2(props, \"delay\");\n  const duration = useVector2(props, \"duration\");\n  const strength = useVector2(props, \"strength\");\n  const chromaticAberrationOffset = useVector2(props, \"chromaticAberrationOffset\");\n  const effect = useMemo(() => new GlitchEffect({\n    ...props,\n    delay,\n    duration,\n    strength,\n    chromaticAberrationOffset\n  }), [delay, duration, props, strength, chromaticAberrationOffset]);\n  useLayoutEffect(() => {\n    effect.mode = active ? props.mode || GlitchMode.SPORADIC : GlitchMode.DISABLED;\n    invalidate();\n  }, [active, effect, invalidate, props.mode]);\n  useEffect(() => {\n    return () => {\n      effect.dispose();\n    };\n  }, [effect]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ref,\n    object: effect,\n    dispose: null\n  });\n});\nexport { Glitch };\n//# sourceMappingURL=Glitch.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}