{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport * as THREE from \"three\";\nclass FullScreenTriangleGeometry extends THREE.BufferGeometry {\n  constructor() {\n    super();\n    __publicField(this, \"boundingSphere\", new THREE.Sphere());\n    this.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array([-1, -1, 3, -1, -1, 3]), 2));\n    this.setAttribute(\"uv\", new THREE.BufferAttribute(new Float32Array([0, 0, 2, 0, 0, 2]), 2));\n  }\n  computeBoundingSphere() {}\n}\nconst _geometry = new FullScreenTriangleGeometry();\nconst _camera = new THREE.OrthographicCamera();\nclass FullScreenTriangle {\n  constructor(material) {\n    this._mesh = new THREE.Mesh(_geometry, material);\n    this._mesh.frustumCulled = false;\n  }\n  render(renderer) {\n    renderer.render(this._mesh, _camera);\n  }\n  get material() {\n    return this._mesh.material;\n  }\n  set material(value) {\n    this._mesh.material = value;\n  }\n  dispose() {\n    this._mesh.material.dispose();\n    this._mesh.geometry.dispose();\n  }\n}\nexport { FullScreenTriangle };\n//# sourceMappingURL=FullScreenTriangle.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}