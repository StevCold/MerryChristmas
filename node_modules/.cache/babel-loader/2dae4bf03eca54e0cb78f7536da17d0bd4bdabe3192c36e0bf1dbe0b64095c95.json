{"ast":null,"code":"import { jsxs, Fragment, jsx } from \"react/jsx-runtime\";\nimport * as THREE from \"three\";\nimport { forwardRef, useRef, useContext, useState, useEffect, useCallback, useMemo, useImperativeHandle } from \"react\";\nimport { useThree, useFrame, createPortal } from \"@react-three/fiber\";\nimport { DepthPickingPass, CopyPass } from \"postprocessing\";\nimport { easing } from \"maath\";\nimport { DepthOfField } from \"./DepthOfField.js\";\nimport { EffectComposerContext } from \"../EffectComposer.js\";\nconst Autofocus = forwardRef(({\n  target = void 0,\n  mouse: followMouse = false,\n  debug = void 0,\n  manual = false,\n  smoothTime = 0.25,\n  ...props\n}, fref) => {\n  const dofRef = useRef(null);\n  const hitpointRef = useRef(null);\n  const targetRef = useRef(null);\n  const scene = useThree(({\n    scene: scene2\n  }) => scene2);\n  const pointer = useThree(({\n    pointer: pointer2\n  }) => pointer2);\n  const {\n    composer,\n    camera\n  } = useContext(EffectComposerContext);\n  const [depthPickingPass] = useState(() => new DepthPickingPass());\n  const [copyPass] = useState(() => new CopyPass());\n  useEffect(() => {\n    composer.addPass(depthPickingPass);\n    composer.addPass(copyPass);\n    return () => {\n      composer.removePass(depthPickingPass);\n      composer.removePass(copyPass);\n    };\n  }, [composer, depthPickingPass, copyPass]);\n  useEffect(() => {\n    return () => {\n      depthPickingPass.dispose();\n      copyPass.dispose();\n    };\n  }, [depthPickingPass, copyPass]);\n  const [hitpoint] = useState(() => new THREE.Vector3(0, 0, 0));\n  const [ndc] = useState(() => new THREE.Vector3(0, 0, 0));\n  const getHit = useCallback(async (x, y) => {\n    ndc.x = x;\n    ndc.y = y;\n    ndc.z = await depthPickingPass.readDepth(ndc);\n    ndc.z = ndc.z * 2 - 1;\n    const hit = 1 - ndc.z > 1e-7;\n    return hit ? ndc.unproject(camera) : false;\n  }, [ndc, depthPickingPass, camera]);\n  const update = useCallback(async (delta, updateTarget = true) => {\n    var _a;\n    if (target) {\n      hitpoint.set(...target);\n    } else {\n      const {\n        x,\n        y\n      } = followMouse ? pointer : {\n        x: 0,\n        y: 0\n      };\n      const hit = await getHit(x, y);\n      if (hit) hitpoint.copy(hit);\n    }\n    if (updateTarget && ((_a = dofRef.current) == null ? void 0 : _a.target)) {\n      if (smoothTime > 0 && delta > 0) {\n        easing.damp3(dofRef.current.target, hitpoint, smoothTime, delta);\n      } else {\n        dofRef.current.target.copy(hitpoint);\n      }\n    }\n  }, [target, hitpoint, followMouse, getHit, smoothTime, pointer]);\n  useFrame(async (_, delta) => {\n    var _a;\n    if (!manual) {\n      update(delta);\n    }\n    if (hitpointRef.current) {\n      hitpointRef.current.position.copy(hitpoint);\n    }\n    if (targetRef.current && ((_a = dofRef.current) == null ? void 0 : _a.target)) {\n      targetRef.current.position.copy(dofRef.current.target);\n    }\n  });\n  const api = useMemo(() => ({\n    dofRef,\n    hitpoint,\n    update\n  }), [hitpoint, update]);\n  useImperativeHandle(fref, () => api, [api]);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [debug ? createPortal( /* @__PURE__ */jsxs(Fragment, {\n      children: [/* @__PURE__ */jsxs(\"mesh\", {\n        ref: hitpointRef,\n        children: [/* @__PURE__ */jsx(\"sphereGeometry\", {\n          args: [debug, 16, 16]\n        }), /* @__PURE__ */jsx(\"meshBasicMaterial\", {\n          color: \"#00ff00\",\n          opacity: 1,\n          transparent: true,\n          depthWrite: false\n        })]\n      }), /* @__PURE__ */jsxs(\"mesh\", {\n        ref: targetRef,\n        children: [/* @__PURE__ */jsx(\"sphereGeometry\", {\n          args: [debug / 2, 16, 16]\n        }), /* @__PURE__ */jsx(\"meshBasicMaterial\", {\n          color: \"#00ff00\",\n          opacity: 0.5,\n          transparent: true,\n          depthWrite: false\n        })]\n      })]\n    }), scene) : null, /* @__PURE__ */jsx(DepthOfField, {\n      ref: dofRef,\n      ...props,\n      target: hitpoint\n    })]\n  });\n});\nexport { Autofocus };\n//# sourceMappingURL=Autofocus.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}