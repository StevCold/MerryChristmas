{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { OutlineEffect } from \"postprocessing\";\nimport { forwardRef, useContext, useMemo, useEffect, useRef } from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport { EffectComposerContext } from \"../EffectComposer.js\";\nimport { selectionContext } from \"../Selection.js\";\nimport { resolveRef } from \"../util.js\";\nconst Outline = forwardRef(function Outline2({\n  selection = [],\n  selectionLayer = 10,\n  blendFunction,\n  patternTexture,\n  edgeStrength,\n  pulseSpeed,\n  visibleEdgeColor,\n  hiddenEdgeColor,\n  width,\n  height,\n  kernelSize,\n  blur,\n  xRay,\n  ...props\n}, forwardRef2) {\n  const invalidate = useThree(state => state.invalidate);\n  const {\n    scene,\n    camera\n  } = useContext(EffectComposerContext);\n  const effect = useMemo(() => new OutlineEffect(scene, camera, {\n    blendFunction,\n    patternTexture,\n    edgeStrength,\n    pulseSpeed,\n    visibleEdgeColor,\n    hiddenEdgeColor,\n    width,\n    height,\n    kernelSize,\n    blur,\n    xRay,\n    ...props\n  }), [blendFunction, blur, camera, edgeStrength, height, hiddenEdgeColor, kernelSize, patternTexture, pulseSpeed, scene, visibleEdgeColor, width, xRay]);\n  const api = useContext(selectionContext);\n  useEffect(() => {\n    if (!api && selection) {\n      effect.selection.set(Array.isArray(selection) ? selection.map(resolveRef) : [resolveRef(selection)]);\n      invalidate();\n      return () => {\n        effect.selection.clear();\n        invalidate();\n      };\n    }\n  }, [effect, selection, api, invalidate]);\n  useEffect(() => {\n    effect.selectionLayer = selectionLayer;\n    invalidate();\n  }, [effect, invalidate, selectionLayer]);\n  useRef();\n  useEffect(() => {\n    var _a;\n    if (api && api.enabled) {\n      if ((_a = api.selected) == null ? void 0 : _a.length) {\n        effect.selection.set(api.selected);\n        invalidate();\n        return () => {\n          effect.selection.clear();\n          invalidate();\n        };\n      }\n    }\n  }, [api, effect.selection, invalidate]);\n  useEffect(() => {\n    return () => {\n      effect.dispose();\n    };\n  }, [effect]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ref: forwardRef2,\n    object: effect\n  });\n});\nexport { Outline };\n//# sourceMappingURL=Outline.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}